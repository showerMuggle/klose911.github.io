#+TITLE: 包管理器
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: fp.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil
目前为止只使用过 Cargo 构建、运行和测试代码这些最基本的功能，不过它还可以做到更多。本章会讨论 Cargo 其他一些更为高级的功能：
+ 使用发布配置来自定义构建
+ 将库发布到 crates.io
+ 使用工作空间来组织更大的项目
+ 从 crates.io 安装二进制文件
+ 使用自定义的命令来扩展 Cargo
  
* 采用发布配置自定义构建
  在 Rust 中 _发布配置_ 是预定义的、可定制的带有不同选项的配置，他们允许程序员更灵活地控制代码编译的多种选项。每一个配置都彼此相互独立。
  
  Cargo 有两个主要的配置：
+ 运行 cargo build 时采用的 dev 配置：开发时的好的默认配置，
+ 运行 cargo build --release 的 release 配置：有着良好的发布构建的默认配置
  
这些配置名称可能很眼熟，因为它们出现在构建的输出中：

#+BEGIN_SRC sh 
  $ cargo build
      Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
  $ cargo build --release
      Finished release [optimized] target(s) in 0.0 secs
#+END_SRC

#+BEGIN_EXAMPLE
构建输出中的 dev 和 release 表明编译器在使用不同的配置
#+END_EXAMPLE

当项目的 Cargo.toml 文件中没有任何 [profile.*] 部分的时候，Cargo 会对每一个配置都采用默认设置。通过 *增加* 任何希望定制的配置对应的 _[profile.*]_ 部分，可以选择覆盖任意默认设置的子集。例如，如下是 dev 和 release 配置的 opt-level 设置的默认值：

#+BEGIN_SRC toml 
  [profile.dev]
  opt-level = 0

  [profile.release]
  opt-level = 3
#+END_SRC

#+BEGIN_EXAMPLE
  opt-level 设置控制 Rust 会对代码进行何种程度的优化。这个配置的值从 0 到 3。越高的优化级别需要更多的时间编译

  如果在进行开发并经常编译，可能会希望在牺牲一些代码性能的情况下编译得快一些，这就是为什么 dev 的 opt-level 默认为 0

  当准备发布时，花费更多时间在编译上则更好。只需要在发布模式编译一次，而编译出来的程序则会运行很多次，所以发布模式用更长的编译时间换取运行更快的代码。这正是为什么 release 配置的 opt-level 默认为 3
#+END_EXAMPLE

可以选择通过在 Cargo.toml 增加不同的值来覆盖任何默认设置。比如，如果想要在开发配置中使用级别 1 的优化，则可以在 Cargo.toml 中增加这两行：

#+BEGIN_SRC toml 
  [profile.dev]
  opt-level = 1
#+END_SRC

#+BEGIN_EXAMPLE
  这会覆盖默认的设置 0，现在运行 cargo build 时，Cargo 将会使用 dev 的默认配置加上定制的 opt-level。因为 opt-level 设置为 1，Cargo 会比默认进行更多的优化，但是没有发布构建那么多

  对于每个配置的设置和其默认值的完整列表，请查看 Cargo 的文档
#+END_EXAMPLE

* 将 crate 发布到 Crates.io
