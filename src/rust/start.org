#+TITLE: 入门
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: rust.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil

* Hello World 

** 编写rust程序 

#+BEGIN_SRC rust
  fn main() {
      println!("Hello, world!");
  }
#+END_SRC

** 编译并运行文件 
#+BEGIN_SRC sh 
  $ rustc main.rs
  $ ./main

  Hello, world!
#+END_SRC

** 分析程序

#+BEGIN_SRC rust 
  fn main() {

  }
#+END_SRC

这几行定义了一个 Rust 函数。 _main_ 函数是一个 *特殊的* 函数：
+ 在可执行的 Rust 程序中，它总是最先运行的代码
+ 第一行代码声明了一个叫做 main 的函数
  + 它 *没有参数* 也 *没有返回值* 
  + 如果有参数的话，它们的名称应该出现在小括号中 _()_ 

#+BEGIN_EXAMPLE
  还须注意，函数体被包裹在花括号中，{}

  Rust 要求所有函数体都要用花括号包裹起来

  一般来说，将左花括号与函数声明置于同一行并以空格分隔，是良好的代码风格
#+END_EXAMPLE

在 _main_ () 函数中是如下代码：
#+BEGIN_SRC rust
  println!("Hello, world!");
#+END_SRC

这行代码完成这个简单程序的所有工作：在屏幕上打印文本。这里有四个重要的细节需要注意：
1. Rust 的缩进风格使用 *4 个空格* ，而不是 1 个制表符
2. _println!_ 调用了一个 *Rust 宏* 。如果是调用函数，则应输入 _println_ （ 没有! ）
3. _"Hello, world!"_ 是一个字符串。把这个字符串作为一个参数传递给 println!，字符串将被打印到屏幕上
4. 该行以 *分号结尾* _;_ ，这代表一个表达式的结束和下一个表达式的开始。大部分 Rust 代码行以分号结尾

** 编译和运行是独立的
Rust 是一种 *预编译静态* 类型语言，这意味着可以编译程序，并将 _可执行文件_ 送给其他人，他们甚至不需要安装 Rust 就可以运行

#+BEGIN_EXAMPLE
  如果你给他人一个 .rb、.py 或 .js 文件，他们需要先分别安装 Ruby，Python，JavaScript 实现（运行时环境，VM）

  不过在这些语言中，只需要一句命令就可以编译和运行程序

  这一切都是语言设计上的权衡取舍
#+END_EXAMPLE

* Hello Cargo 
#+BEGIN_EXAMPLE
  仅仅使用 rustc 编译简单程序是没问题的，不过随着项目的增长，可能需要管理你项目的方方面面，并让代码易于分享

  接下来，要介绍一个叫做 Cargo 的工具，它会帮助编写真实世界中的 Rust 程序
#+END_EXAMPLE
