#+TITLE: Web服务器
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: advanced.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil

作为最后的项目，将要实现一个返回 “hello” 的 web server，它在浏览器中看起来就如下所示：

   #+ATTR_HTML: image :width 30% 
   [[file:pic/trpl20-01.png]] 

如下是将怎样构建此 web server 的计划：
1. 学习一些 TCP 与 HTTP 知识
2. 在套接字socket上监听 TCP 请求
3. 解析少量的 HTTP 请求
4. 创建一个合适的 HTTP 响应
5. 通过线程池改善 server 的吞吐量

#+BEGIN_EXAMPLE
  不过在开始之前，需要提到一点细节：这里使用的方法并不是使用 Rust 构建 web server 最好的方法

  crates.io 上有很多可用于生产环境的 crate，它们提供了比我们所要编写的更为完整的 web server 和线程池实现

  然而，我们的目的在于学习自己编写一个基础的 HTTP server 和线程池，以便学习将来可能用到的 crate 背后的通用理念和技术

  这里也展示了选择处理什么层次的抽象，并能够选择比其他语言可能或可用的层次更低的层次
#+END_EXAMPLE
* 构建单线程 web server
首先创建一个可运行的单线程 web server，不过在开始之前，将快速了解一下构建 web server 所涉及到的协议

#+BEGIN_EXAMPLE
  web server 中涉及到的两个主要协议是 超文本传输协议(HTTP)和 传输控制协议(TCP)。这两者都是 请求-响应协议，也就是说，有客户端来初始化请求，并有服务端监听请求并向客户端提供响应。请求与响应的内容由协议本身定义。

  TCP 是一个底层协议，它描述了信息如何从一个 server 到另一个的细节，不过其并不指定信息是什么

  HTTP 构建于 TCP 之上，它定义了请求和响应的内容

  技术上讲可将 HTTP 用于其他协议之上，不过对于绝大部分情况，HTTP 通过 TCP 传输。将要做的就是处理 TCP 和 HTTP 请求与响应的原始字节数据
#+END_EXAMPLE
** 监听 TCP 连接 
我们的 web server 所需做的第一件事便是能够监听 TCP 连接。标准库提供了 _std::net_ 模块处理这些功能。一如既往新建一个项目：

#+BEGIN_SRC sh 
  $ cargo new hello
       Created binary (application) `hello` project
  $ cd hello
#+END_SRC

在 src/main.rs 输入下面的代码作为开始。这段代码会在地址 127.0.0.1:7878 上监听传入的 TCP 流。当获取到传入的流，它会打印出 Connection established!：

#+BEGIN_SRC rust 
  use std::net::TcpListener;

  fn main() {
      let listener = TcpListener::bind("127.0.0.1:7878").unwrap();

      for stream in listener.incoming() {
	  let stream = stream.unwrap();

	  println!("Connection established!");
      }
  }
#+END_SRC

_TcpListener_ 用于 *监听* _TCP 连接_ ，选择监听地址 _127.0.0.1:7878_ 
#+BEGIN_EXAMPLE
  将这个地址拆开，冒号之前的部分是一个代表本机的 IP 地址

  而 7878 是端口。选择这个端口出于两个原因：通常 HTTP 接受这个端口而且 7878 在电话上打出来就是 "rust"
#+END_EXAMPLE

在这个场景中 _bind_ 函数类似于 new 函数，在这里它返回一个 _新的 TcpListener 实例_ 
#+BEGIN_EXAMPLE
这个函数叫做 bind 是因为，在网络领域，连接到监听端口被称为 “绑定到一个端口”
#+END_EXAMPLE

bind 函数返回 _Result<T, E>_ ，这表明 *绑定可能会失败* 。因为是出于学习目的来编写一个基础的 server，将不用关心处理这类错误，使用 _unwrap_ 在出现这些情况时 *直接停止程序* 

#+BEGIN_EXAMPLE
  例如，连接 80 端口需要管理员权限（非管理员用户只能监听大于 1024 的端口），所以如果不是管理员尝试连接 80 端口，则会绑定失败

  另一个例子是如果运行两个此程序的实例这样会有两个程序监听相同的端口，绑定会失败
#+END_EXAMPLE

TcpListener 的 _incoming_ 方法返回一个 _迭代器_ ，它提供了 *一系列的流* （更准确的说是 TcpStream 类型的流）:
+ _流_ 代表一个客户端和服务端之间打开的连接
+ _连接_ 代表客户端连接服务端、服务端生成响应以及服务端关闭连接的全部请求 / 响应过程
+ TcpStream 允许读取它来查看客户端发送了什么，并可以编写响应
+ 总体来说，这个 for 循环会依次处理每个连接并产生一系列的流供我们处理


目前为止，处理流的过程包含 unwrap 调用，如果出现任何错误会终止程序，如果没有任何错误，则打印出信息
#+BEGIN_EXAMPLE
  下一个示例将为成功的情况增加更多功能。当客户端连接到服务端时 incoming 方法返回错误是可能的，因为实际上没有遍历连接，而是遍历“连接尝试”

  连接可能会因为很多原因不能成功，大部分是操作系统相关的。例如，很多系统限制同时打开的连接数；新连接尝试产生错误，直到一些打开的连接关闭为止
#+END_EXAMPLE

首先在终端执行 cargo run，接着在浏览器中加载 127.0.0.1:7878。浏览器会显示出看起来类似于“连接重置”的错误信息，因为 server 目前并没响应任何数据。但是如果观察终端，会发现当浏览器连接 server 时会打印出一系列的信息！

#+BEGIN_SRC sh 
       Running `target/debug/hello`
  Connection established!
  Connection established!
  Connection established!
#+END_SRC

#+BEGIN_EXAMPLE
  有时会看到对于一次浏览器请求会打印出多条信息；这可能是因为浏览器在请求页面的同时还请求了其他资源，比如出现在浏览器 tab 标签中的 favicon.icon

  这也可能是因为浏览器尝试多次连接 server，因为 server 没有响应任何数据。当 stream 在循环的结尾离开作用域并被丢弃，其连接将被关闭，作为 drop 实现的一部分。浏览器有时通过重连来处理关闭的连接，因为这些问题可能是暂时的

  现在重要的是我们成功的处理了 TCP 连接！
#+END_EXAMPLE
** 读取请求 

*** 仔细观察 HTTP 请求 
** 编写响应 
*** 返回真正的 HTML 
** 验证请求并有选择的进行响应 
** 少量代码重构 
* 多线程 web server  
* 优雅停机
