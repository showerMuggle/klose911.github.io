#+TITLE: 基础知识
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: helloworld.html   
#+HTML_LINK_HOME: elisp.html
#+OPTIONS: num:nil timestamp:nil ^:nil

这一节介绍一下 elisp 编程中一些最基本的概念，比如如何 _定义函数_ ，程序的 _控制结构_ ， _变量_ 的使用和 *作用域* 等等 
*  函数

elisp 中定义一个函数是用这样的形式：

#+BEGIN_SRC lisp 
  (defun function-name (arguments-list)
    "document string"
    body)
#+END_SRC

比如：

#+BEGIN_SRC lisp 
  (defun hello-world (name)
    "Say hello to user whose name is NAME."
    (message "Hello, %s" name))
#+END_SRC

#+BEGIN_EXAMPLE
  其中函数的文档字符串是可以省略的。但是建议为你的函数（除了最简单，不作为接口的）都加上文档字符串

  这样将来别人使用你的扩展或者别人阅读你的代码或者自己进行维护都提供很大的方便
#+END_EXAMPLE

在 emacs 里，当光标处于一个函数名上时，可以用  _C-h f_ 查看这个函数的文档。比如前面这个函数，在 *Help* 缓冲区里的文档是：

#+BEGIN_SRC sh 
  hello-world is a Lisp function.
  (hello-world name)

  Say hello to user whose name is name.
#+END_SRC

#+BEGIN_EXAMPLE
  如果你的函数是在文件中定义的。这个文档里还会给出一个链接能跳到定义的地方
#+END_EXAMPLE

要运行一个函数，最一般的方式是：

#+BEGIN_SRC lisp 
(function-name arguments-list)
#+END_SRC

比如前面这个函数：

#+BEGIN_SRC lisp 
  (hello-world "Emacser")                 ; => "Hello, Emacser"
#+END_SRC

*每个函数都有一个返回值* 。这个返回值一般是函数定义里的 _最后一个表达式的值_ 
* 变量

