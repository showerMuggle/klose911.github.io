#+TITLE: 配置Pod的liveness和readiness探针
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_HOME: config.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
  使用kubernetes的时候，有没有遇到过Pod在启动后一会就挂掉然后又重新启动这样的恶性循环？

  有没有想过kubernetes是如何检测pod是否还存活？

  虽然容器已经启动，但是kubernetes如何知道容器的进程是否准备好对外提供服务了呢？
#+end_example

Kubelet使用 _liveness probe_ （存活探针）来确定何时 *重启容器* 

#+begin_example
  例如，当应用程序处于运行状态但无法做进一步操作，liveness探针将捕获到deadlock，重启处于该状态下的容器，使应用程序在存在bug的情况下依然能够继续运行下去（谁的程序还没几个bug呢）
#+end_example

Kubelet使用 _readiness probe_ （就绪探针）来确定容器是否已经就绪可以 *接受流量* ：
+ 只有当Pod中的容器都处于就绪状态时kubelet才会认定该Pod处于就绪状态。该信号的作用是控制哪些Pod应该作为service的后端
+ 如果Pod处于非就绪状态，那么它们将会被从service的load balancer中移除

* 定义 liveness命令
  许多长时间运行的应用程序最终会转换到broken状态，除非重新启动，否则无法恢复。Kubernetes提供了liveness probe来检测和补救这种情况 

  #+begin_example
    在本次练习将基于 gcr.io/google_containers/busybox镜像创建运行一个容器的Pod
  #+end_example

  以下是Pod的配置文件exec-liveness.yaml：

  #+begin_example
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
	test: liveness
      name: liveness-exec
    spec:
      containers:
      - name: liveness
	args:
	- /bin/sh
	- -c
	- touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
	image: gcr.io/google_containers/busybox
	livenessProbe:
	  exec:
	    command:
	    - cat
	    - /tmp/healthy
	  initialDelaySeconds: 5
	  periodSeconds: 5
  #+end_example

  #+begin_example
    该配置文件给Pod配置了一个容器

    periodSeconds 规定kubelet要每隔5秒执行一次liveness probe

    initialDelaySeconds 告诉kubelet在第一次执行probe之前要的等待5秒钟

    探针检测命令是在容器中执行 cat /tmp/healthy 命令

    如果命令执行成功，将返回0，kubelet就会认为该容器是活着的并且很健康。如果返回非0值，kubelet就会杀掉这个容器并重启它
  #+end_example

  容器启动时，执行该命令：

  #+begin_src sh 
    /bin/sh -c "touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600"
  #+end_src

  #+begin_example
    在容器生命的最初30秒内有一个 /tmp/healthy 文件，在这30秒内 cat /tmp/healthy命令会返回一个成功的返回码

    30秒后， cat /tmp/healthy 将返回失败的返回码
  #+end_example

  创建Pod：

  #+begin_src sh 
    $ kubectl create -f https://k8s.io/docs/tasks/configure-pod-container/exec-liveness.yaml
  #+end_src

  在30秒内，查看Pod的event：

  #+begin_src sh 
    $ kubectl describe pod liveness-exec
  #+end_src

  结果显示没有失败的liveness probe：

  #+begin_src sh 
    FirstSeen    LastSeen    Count   From            SubobjectPath           Type        Reason      Message
    --------- --------    -----   ----            -------------           --------    ------      -------
    24s       24s     1   {default-scheduler }                    Normal      Scheduled   Successfully assigned liveness-exec to worker0
    23s       23s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Pulling     pulling image "gcr.io/google_containers/busybox"
    23s       23s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Pulled      Successfully pulled image "gcr.io/google_containers/busybox"
    23s       23s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Created     Created container with docker id 86849c15382e; Security:[seccomp=unconfined]
    23s       23s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Started     Started container with docker id 86849c15382e
  #+end_src

  启动35秒后，再次查看pod的event：

  #+begin_src sh
    $ kubectl describe pod liveness-exec
  #+end_src

  在最下面有一条信息显示liveness probe失败，容器被删掉并重新创建：

  #+begin_src sh 
    FirstSeen LastSeen    Count   From            SubobjectPath           Type        Reason      Message
    --------- --------    -----   ----            -------------           --------    ------      -------
    37s       37s     1   {default-scheduler }                    Normal      Scheduled   Successfully assigned liveness-exec to worker0
    36s       36s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Pulling     pulling image "gcr.io/google_containers/busybox"
    36s       36s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Pulled      Successfully pulled image "gcr.io/google_containers/busybox"
    36s       36s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Created     Created container with docker id 86849c15382e; Security:[seccomp=unconfined]
    36s       36s     1   {kubelet worker0}   spec.containers{liveness}   Normal      Started     Started container with docker id 86849c15382e
    2s        2s      1   {kubelet worker0}   spec.containers{liveness}   Warning     Unhealthy   Liveness probe failed: cat: can't open '/tmp/healthy': No such file or directory
  #+end_src

  再等30秒，确认容器已经重启：

  #+begin_src sh 
    $ kubectl get pod liveness-exec
  #+end_src

  从输出结果来RESTARTS值加1了：

  #+begin_src sh 
    NAME            READY     STATUS    RESTARTS   AGE
    liveness-exec   1/1       Running   1          1m
  #+end_src

* 定义一个liveness HTTP请求
  可以使用 _HTTP GET请求_ 作为liveness probe。下面是一个基于gcr.io/google_containers/liveness镜像运行了一个容器的Pod的例子http-liveness.yaml

  #+begin_example
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
	test: liveness
      name: liveness-http
    spec:
      containers:
      - name: liveness
	args:
	- /server
	image: gcr.io/google_containers/liveness
	livenessProbe:
	  httpGet:
	    path: /healthz
	    port: 8080
	    httpHeaders:
	      - name: X-Custom-Header
		value: Awesome
	  initialDelaySeconds: 3
	  periodSeconds: 3
  #+end_example

  #+begin_example
    该配置文件只定义了一个容器，livenessProbe 指定kubelet需要每隔3秒执行一次liveness probe

    initialDelaySeconds 指定kubelet在该执行第一次探测之前需要等待3秒钟

    该探针将向容器中的server的8080端口发送一个HTTP GET请求

    如果server的/healthz路径的handler返回一个成功的返回码，kubelet就会认定该容器是活着的并且很健康

    如果返回失败的返回码，kubelet将杀掉该容器并重启它。

    任何大于200小于400的返回码都会认定是成功的返回码。其他返回码都会被认为是失败的返回码
  #+end_example

  最开始的10秒该容器是活着的， /healthz handler返回200的状态码。这之后将返回500的返回码

  #+begin_src go 
    http.HandleFunc("/healthz", func(w http.ResponseWriter, r *http.Request) {
	    duration := time.Now().Sub(started)
	    if duration.Seconds() > 10 {
		    w.WriteHeader(500)
		    w.Write([]byte(fmt.Sprintf("error: %v", duration.Seconds())))
	    } else {
		    w.WriteHeader(200)
		    w.Write([]byte("ok"))
	    }
    })
  #+end_src

  #+begin_example
    容器启动3秒后，kubelet开始执行健康检查：第一次健康监测会成功，但是10秒后，健康检查将失败，kubelet将杀掉和重启容器
  #+end_example

  创建一个Pod来测试一下HTTP liveness检测：

  #+begin_src sh 
    $ kubectl create -f https://k8s.io/docs/tasks/configure-pod-container/http-liveness.yaml
  #+end_src

  10秒后，查看Pod的event，确认liveness probe失败并重启了容器：

  #+begin_src sh 
    $ kubectl describe pod liveness-http
  #+end_src

* 定义TCP liveness探针
  第三种liveness probe使用 _TCP Socket_ 。 使用此配置，kubelet将尝试在指定端口上打开容器的套接字：
  + 如果可以建立连接，容器被认为是健康的
  + 如果不能就认为是失败的

  #+begin_example
    apiVersion: v1
    kind: Pod
    metadata:
      name: goproxy
      labels:
	app: goproxy
    spec:
      containers:
      - name: goproxy
	image: gcr.io/google_containers/goproxy:0.1
	ports:
	- containerPort: 8080
	readinessProbe:
	  tcpSocket:
	    port: 8080
	  initialDelaySeconds: 5
	  periodSeconds: 10
	livenessProbe:
	  tcpSocket:
	    port: 8080
	  initialDelaySeconds: 15
	  periodSeconds: 20
  #+end_example

  #+begin_example
    TCP检查的配置与HTTP检查非常相似。 此示例同时使用了readiness和liveness probe

    容器启动后5秒钟，kubelet将发送第一个readiness probe。 这将尝试连接到端口8080上的goproxy容器

    如果探测成功，则该pod将被标记为就绪。Kubelet将每隔10秒钟执行一次该检查

    除了readiness probe之外，该配置还包括liveness probe，容器启动15秒后，kubelet将运行第一个liveness probe

    就像readiness probe一样，这将尝试连接到goproxy容器上的8080端口。如果liveness probe失败，容器将重新启动
  #+end_example

* 使用命名的端口
  可以使用命名的ContainerPort作为HTTP或TCP liveness检查：

  #+begin_example
    ports:
    - name: liveness-port
      containerPort: 8080
      hostPort: 8080

    livenessProbe:
      httpGet:
      path: /healthz
      port: liveness-port
  #+end_example




