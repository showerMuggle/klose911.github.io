#+TITLE: 泛型
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: error.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil
每一个编程语言都有高效处理重复概念的工具。在 Rust 中其工具之一就是 _泛型_ （generics）。泛型是 _具体类型_ 或 _其他属性_ 的 *抽象替代* 
#+BEGIN_EXAMPLE
  泛型可以表达泛型的属性 ，比如他们的行为或如何与其他泛型相关联，而不需要在编写和编译代码时知道他们在这里实际上代表什么

  当然可以编写一份可以用于多种具体值的代码，函数并不知道其参数为何值，这时就可以让函数获取泛型而不是像 i32 或 String 这样的具体值

  前面讨论过的 Option<T>，Vec<T> 和 HashMap<K, V>，以及 Result<T, E> 这些都属于泛型
#+END_EXAMPLE
这里将：
1. 回顾一下提取函数以减少代码重复的机制
2. 使用相同的技术，从两个仅参数类型不同的函数中创建一个泛型函数
3. 结构体和枚举定义中的泛型
   
之后讨论 _trait_ ，这是一个 *定义泛型行为* 的方法

#+BEGIN_EXAMPLE
trait 可以与泛型结合来将泛型限制为拥有特定行为的类型，而不是任意类型
#+END_EXAMPLE

最后介绍 _生命周期_ ，它是一类允许向 _编译器_ 提供 _引用如何相互关联_ 的泛型

#+BEGIN_EXAMPLE
  Rust 的生命周期功能允许在很多场景下借用值的同时仍然使编译器能够检查这些引用的有效性
#+END_EXAMPLE

* 提取函数来减少重复
  #+BEGIN_EXAMPLE
    在介绍泛型语法之前，首先来回顾一个不使用泛型的处理重复的技术：提取一个函数

    当熟悉了这个技术以后，将使用相同的机制来提取一个泛型函数！

    如同你识别出可以提取到函数中重复代码那样，你也会开始识别出能够使用泛型的重复代码
  #+END_EXAMPLE

  考虑一下这个寻找列表中最大值的小程序，如下所示：
  #+BEGIN_SRC rust 
  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let mut largest = number_list[0];

      for number in number_list {
	  if number > largest {
	      largest = number;
	  }
      }

      println!("The largest number is {}", largest);
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    1. 这段代码获取一个整型列表，存放在变量 number_list 中。它将列表的第一项放入了变量 largest 中
    2. 接着遍历了列表中的所有数字，如果当前值大于 largest 中储存的值，将 largest 替换为这个值
    3. 如果当前值小于或者等于目前为止的最大值，largest 保持不变
    4. 当列表中所有值都被考虑到之后，largest 将会是最大值，在这里也就是 100
  #+END_EXAMPLE

  如果需要在两个不同的列表中寻找最大值，可以重复上面示例种的代码，这样程序中就会存在两段相同逻辑的代码：

  #+BEGIN_SRC rust 
  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let mut largest = number_list[0];

      for number in number_list {
	  if number > largest {
	      largest = number;
	  }
      }

      println!("The largest number is {}", largest);

      let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

      let mut largest = number_list[0];

      for number in number_list {
	  if number > largest {
	      largest = number;
	  }
      }

      println!("The largest number is {}", largest);
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
  虽然代码能够执行，但是重复的代码是冗余且容易出错的，并且意味着当更新逻辑时需要修改多处地方的代码
  #+END_EXAMPLE

  为了消除重复，可以创建一层抽象，在这个例子中将表现为一个获取任意整型列表作为参数并对其进行处理的函数

  #+BEGIN_EXAMPLE
  这将增加代码的简洁性并将表达和推导寻找列表中最大值的这个概念与使用这个概念的特定位置相互独立
  #+END_EXAMPLE

  将寻找最大值的代码提取到了一个叫做 _largest_ 的 *函数* 中。这不同于前面的代码只能在一个特定的列表中找到最大的数字，这个程序可以在两个不同的列表中找到最大的数字：

  #+BEGIN_SRC rust 
  fn largest(list: &[i32]) -> i32 {
      let mut largest = list[0];

      for &item in list {
	  if item > largest {
	      largest = item;
	  }
      }

      largest
  }

  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let result = largest(&number_list);
      println!("The largest number is {}", result);

      let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

      let result = largest(&number_list);
      println!("The largest number is {}", result);
  }
  #+END_SRC

  #+BEGIN_EXAMPLE
    largest 函数有一个参数 list，它代表会传递给函数的任何具体的 i32值的 slice

    函数定义中的 list 代表任何 &[i32]。当调用 largest 函数时，其代码实际上运行于传递的特定值上

  #+END_EXAMPLE
  总的来说，经历了如下几步：
  1. 找出重复代码
  2. 将重复代码提取到了一个函数中，并在函数签名中指定了代码中的输入和返回值
  3. 将重复代码的两个实例，改为调用函数

  #+BEGIN_EXAMPLE
    如果我们有两个函数，一个寻找一个 i32 值的 slice 中的最大项而另一个寻找 char 值的 slice 中的最大项该怎么办？该如何消除重复呢？
  #+END_EXAMPLE

  在不同的场景使用不同的方式，可以利用相同的步骤和泛型来减少重复代码。与函数体可以在抽象list而不是特定值上操作的方式相同，泛型允许代码对抽象类型进行操作
* 泛型
  #+BEGIN_EXAMPLE
  可以使用泛型为像函数签名或结构体这样的项创建定义，这样它们就可以用于多种不同的具体数据类型
  
  看看如何使用泛型定义函数、结构体、枚举和方法，然后讨论泛型如何影响代码性能
  #+END_EXAMPLE
** 在函数定义中使用泛型
   当使用泛型定义函数时，在 _函数签名_ 中通常为 _参数_ 和 _返回值_ 指定数据类型的位置放置泛型
   
   #+BEGIN_EXAMPLE
   以这种方式编写的代码将更灵活并能向函数调用者提供更多功能，同时不引入重复代码
   #+END_EXAMPLE
   
   回到 largest 函数上，下面展示了两个提供了相同的寻找 slice 中最大值功能的函数：
   
   #+BEGIN_SRC rust 
  fn largest_i32(list: &[i32]) -> i32 {
      let mut largest = list[0];

      for &item in list.iter() {
          if item > largest {
              largest = item;
          }
      }

      largest
  }

  fn largest_char(list: &[char]) -> char {
      let mut largest = list[0];

      for &item in list.iter() {
          if item > largest {
              largest = item;
          }
      }

      largest
  }

  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let result = largest_i32(&number_list);
      println!("The largest number is {}", result);

      let char_list = vec!['y', 'm', 'a', 'q'];

      let result = largest_char(&char_list);
      println!("The largest char is {}", result);
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   largest_i32 函数是前面提取的寻找 slice 中 i32 最大值的函数
   
   largest_char 函数寻找 slice 中 char 的最大值
   
   这两个函数有着相同的代码，所以在一个单独的函数中引入泛型参数来消除重复
   #+END_EXAMPLE
   
   为了参数化要定义的函数的签名中的类型，需要像给函数的值参数起名那样为 _这类型参数_ 起一个 *名字* 
   
   #+BEGIN_EXAMPLE
   任何标识符都可以作为类型参数名
   
   不过选择 T 是因为 Rust 的习惯是让变量名尽量短，通常就只有一个字母
   
   同时 Rust 类型命名规范是骆驼命名法。T 作为 “type” 的缩写是大部分 Rust 程序员的首选
   #+END_EXAMPLE
   
   + 当需要在函数体中使用一个参数时，必须在 _函数签名_ 中 *声明* 这个 _参数_ 以便编译器能知道函数体中这个名称的意义
   + 同理，当在函数签名中使用一个类型参数时，必须在使用它之前就声明它

   为了定义泛型版本的 largest 函数， *类型参数声明* 位于 _函数名称_ 与 _参数列表_ 中间的尖括号 _<>_ 中，像这样：

   #+BEGIN_SRC rust 
  fn largest<T>(list: &[T]) -> T {
   #+END_SRC

   #+BEGIN_EXAMPLE
     这可以理解为：函数 largest 有泛型类型 T：
     1. 它有一个参数 list，它的类型是一个 T 值的 slice
     2. largest 函数将会返回一个与 T 相同类型的值
   #+END_EXAMPLE

   下面展示一个在签名中使用了泛型的统一的 largest 函数定义。该示例也向展示了如何对 i32 值的 slice 或 char 值的 slice 调用 largest 函数

   #+BEGIN_EXAMPLE
   注意这些代码还不能编译，不过稍后部分会修复错误
   #+END_EXAMPLE

   #+BEGIN_SRC rust 
  fn largest<T>(list: &[T]) -> T {
      let mut largest = list[0];

      for &item in list.iter() {
          if item > largest {
              largest = item;
          }
      }

      largest
  }

  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let result = largest(&number_list);
      println!("The largest number is {}", result);

      let char_list = vec!['y', 'm', 'a', 'q'];

      let result = largest(&char_list);
      println!("The largest char is {}", result);
  }
   #+END_SRC

   如果现在就尝试编译这些代码，会出现如下错误：
   #+BEGIN_SRC sh 
  error[E0369]: binary operation `>` cannot be applied to type `T`
   --> src/main.rs:5:12
    |
  5 |         if item > largest {
    |            ^^^^^^^^^^^^^^
    |
    = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`
   #+END_SRC

   这个错误表明 largest 的函数体不能适用于 T 的所有可能的类型。因为在函数体需要比较 T 类型的值，不过它只能用于我们知道如何排序的类型
   #+BEGIN_EXAMPLE
     注释中提到了 std::cmp::PartialOrd，这是一个 trait：可以实现类型的比较功能

     在 “trait 作为参数” 部分会讲解如何指定泛型实现特定的 trait
   #+END_EXAMPLE
** 结构体定义中的泛型
   同样也可以使用 <> 语法来定义拥有一个或多个 _泛型参数类型字段_ 的结构体。下面展示了如何定义和使用一个可以存放任何类型的 x 和 y 坐标值的结构体 Point：
   
   #+BEGIN_SRC rust 
  struct Point<T> {
      x: T,
      y: T,
  }

  fn main() {
      let integer = Point { x: 5, y: 10 };
      let float = Point { x: 1.0, y: 4.0 };
  }
   #+END_SRC
   其语法类似于函数定义中使用泛型：
   1. 必须在 _结构体名称_ 后面的尖括号中 *声明* _泛型参数的名称_
   2. 在结构体定义中可以 *指定* _具体数据类型的位置_ *使用* _泛型类型_ 

   注意 Point<T> 的定义中只使用了一个泛型类型，这个定义表明结构体 Point<T> 对于一些类型 T 是泛型的，而且字段 _x_ 和 _y_ 都是 *相同类型* 的，无论它具体是何类型。如果尝试创建一个有不同类型值的 Point<T> 的实例，像下面的不能编译：

   #+BEGIN_SRC rust 
  struct Point<T> {
      x: T,
      y: T,
  }

  fn main() {
      let wont_work = Point { x: 5, y: 4.0 };
  }
   #+END_SRC
   在这个例子中，当把整型值 5 赋值给 x 时，就告诉了编译器这个 Point<T> 实例中的泛型 T 是整型的。接着指定 y 为 4.0，它被定义为与 x 相同类型，就会得到一个像这样的类型不匹配错误：

   #+BEGIN_SRC sh 
  error[E0308]: mismatched types
   --> src/main.rs:7:38
    |
  7 |     let wont_work = Point { x: 5, y: 4.0 };
    |                                      ^^^ expected integer, found
  floating-point number
    |
    = note: expected type `{integer}`
               found type `{float}`
   #+END_SRC

   如果想要定义一个 x 和 y 可以有不同类型且仍然是泛型的 Point 结构体，可以使用 _多个_ 泛型类型参数。修改 Point 的定义为拥有两个泛型类型 T 和 U。其中字段 x 是 T 类型的，而字段 y 是 U 类型的： 

   #+BEGIN_SRC rust 
  struct Point<T, U> {
      x: T,
      y: U,
  }

  fn main() {
      let both_integer = Point { x: 5, y: 10 };
      let both_float = Point { x: 1.0, y: 4.0 };
      let integer_and_float = Point { x: 5, y: 4.0 };
  }
   #+END_SRC

   现在所有这些 Point 实例都是被允许的了

   #+BEGIN_EXAMPLE
     可以在定义中使用任意多的泛型类型参数，不过太多的话代码将难以阅读和理解

     当代码中需要许多泛型类型时，它可能表明代码需要重组为更小的部分
   #+END_EXAMPLE

** 枚举定义中的泛型
   类似于结构体， _枚举_ 也可以在其成员中存放泛型数据类型。已经使用过了标准库提供的 Option<T> 枚举：
   #+BEGIN_SRC rust 
  enum Option<T> {
      Some(T),
      None,
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   现在这个定义看起来就更容易理解了。Option<T> 是一个拥有泛型 T 的枚举，它有两个成员：Some，它存放了一个类型 T 的值，和不存在任何值的None
   
   通过 Option<T> 枚举可以表达有一个可能的值的抽象概念，同时因为 Option<T> 是泛型的，无论这个可能的值是什么类型都可以使用这个抽象
   #+END_EXAMPLE
   
   枚举也可以拥有多个泛型类型。使用过的 Result 枚举定义就是一个这样的例子：
   
   #+BEGIN_SRC rust 
  enum Result<T, E> {
      Ok(T),
      Err(E),
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   Result 枚举有两个泛型类型，T 和 E。Result 有两个成员：
   1. Ok，它存放一个类型 T 的值
   2. Err 则存放一个类型 E 的值
   
   这个定义使得 Result 枚举能很方便的表达任何可能成功（返回 T 类型的值）也可能失败（返回 E 类型的值）的操作
   
   前一章中打开一个文件的场景：当文件被成功打开 T 被放入了 std::fs::File 类型而当打开文件出现问题时 E 被放入了 std::io::Error 类型
   #+END_EXAMPLE
   
   当发现代码中有多个只有存放的值的类型有所不同的结构体或枚举定义时，应该像之前的函数定义中那样引入泛型类型来减少重复代码
   
** 方法定义中的泛型
   可以为定义中 *带有泛型* 的 _结构体_ 或 _枚举_ *实现* _方法_ 。下面展示了前面定义的结构体 Point<T>，和在其上实现的名为 x 的方法：
   
   #+BEGIN_SRC rust 
  struct Point<T> {
      x: T,
      y: T,
  }

  impl<T> Point<T> {
      fn x(&self) -> &T {
          &self.x
      }
  }

  fn main() {
      let p = Point { x: 5, y: 10 };

      println!("p.x = {}", p.x());
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   这里在 Point<T> 上定义了一个叫做 x 的方法来返回字段 x 中数据的引用
   #+END_EXAMPLE
   注意：必须在 _impl 后面_ 声明 T，这样就可以在 Point<T> 上实现的方法中使用它了
   
   #+BEGIN_EXAMPLE
   在 impl 之后声明泛型 T ，这样 Rust 就知道 Point 的尖括号中的类型是泛型而不是具体类型
   #+END_EXAMPLE
   
   当然也可以选择为 Point<f32> 实例实现方法，而不是为泛型 Point 实例。下面展示了一个没有在 impl 之后（的尖括号）声明泛型的例子，这里使用了一个具体类型 _f32_ ：
   
   #+BEGIN_SRC rust 
  impl Point<f32> {
      fn distance_from_origin(&self) -> f32 {
          (self.x.powi(2) + self.y.powi(2)).sqrt()
      }
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   这段代码意味着 Point<f32> 类型会有一个方法 distance_from_origin，而其他 T 不是 f32 类型的 Point<T> 实例则没有定义此方法
   
   这个方法计算点实例与坐标 (0.0, 0.0) 之间的距离，并使用了只能用于浮点型的数学运算符
   #+END_EXAMPLE
   
   _结构体定义_ 中的泛型类型参数并 *不总是* 与 _结构体方法签名_ 中使用的泛型是 *同一类型* 。下面实例中 Point<T, U> 上定义了一个方法 mixup。这个方法获取另一个 Point 作为参数，而它可能与调用 mixup 的 self 是不同的 Point 类型。这个方法用 self 的 Point 类型的 x 值（类型 T）和参数的 Point 类型的 y 值（类型 W）来创建一个新 Point 类型的实例：
   
   #+BEGIN_SRC rust 
  struct Point<T, U> {
      x: T,
      y: U,
  }

  impl<T, U> Point<T, U> {
      fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {
          Point {
              x: self.x,
              y: other.y,
          }
      }
  }

  fn main() {
      let p1 = Point { x: 5, y: 10.4 };
      let p2 = Point { x: "Hello", y: 'c'};

      let p3 = p1.mixup(p2);

      println!("p3.x = {}, p3.y = {}", p3.x, p3.y);
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
     在 main 函数中，定义了一个有 i32 类型的 x（其值为 5）和 f64 的 y（其值为 10.4）的 p1，p2 则是一个有着字符串 slice 类型的 x（其值为 "Hello"）和 char 类型的 y（其值为c）的 Point

     在 p1 上以 p2 作为参数调用 mixup 会返回一个 p3，它会有一个 i32 类型的 x，因为 x 来自 p1，并拥有一个 char 类型的 y，因为 y 来自 p2，println! 会打印出 p3.x = 5, p3.y = c
   #+END_EXAMPLE
   
   这个例子的目的是展示一些泛型通过 impl 声明而另一些通过方法定义声明的情况：
   + 这里泛型参数 _T_ 和 _U_ 声明于 impl 之后，因为他们与 *结构体定义* 相对应
   + 泛型参数 _V_ 和 _W_ 声明于 _fn mixup_ 之后，因为他们只是相对于 *方法* 本身的


** 泛型代码的性能
   Rust 实现了泛型，使得使用泛型类型参数的代码相比使用具体类型并 *没有任何速度上的损失* ： 通过在 _编译时_ 进行 泛型代码的 *单态化* 来保证效率。这是一个通过填充编译时使用的具体类型，将通用代码转换为特定代码的过程
   
   #+BEGIN_EXAMPLE
   编译器所做的工作正好与创建泛型函数的步骤相反
   
   编译器寻找所有泛型代码被调用的位置并使用泛型代码针对具体类型生成代码
   #+END_EXAMPLE
   看看一个使用标准库中 Option 枚举的例子：
   #+BEGIN_SRC rust 
  let integer = Some(5);
  let float = Some(5.0);
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   当 Rust 编译这些代码的时候，它会进行单态化
   
   编译器会读取传递给 Option<T> 的值并发现有两种 Option<T>：一个对应 i32 另一个对应 f64
   
   为此，它会将泛型定义 Option<T> 展开为 Option_i32 和 Option_f64，接着将泛型定义替换为这两个具体的定义
   #+END_EXAMPLE
   
   编译器生成的单态化版本的代码看起来像这样，并包含将泛型 Option<T> 替换为编译器创建的具体定义后的用例代码：
   
   #+BEGIN_SRC rust 
  enum Option_i32 {
      Some(i32),
      None,
  }

  enum Option_f64 {
      Some(f64),
      None,
  }

  fn main() {
      let integer = Option_i32::Some(5);
      let float = Option_f64::Some(5.0);
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   可以使用泛型来编写不重复的代码，而 Rust 将会为每一个实例编译其特定类型的代码
   
   这意味着在使用泛型时没有运行时开销：当代码运行，它的执行效率就跟好像手写每个具体定义的重复代码一样
   
   这个单态化过程正是 Rust 泛型在运行时极其高效的原因
   #+END_EXAMPLE

* trait: 定义共享的行为
  trait 告诉 Rust 编译器 _某个特定类型_ *拥有* 可能 _与其他类型_ *共享* 的功能：
  + 通过 _trait_ 以一种抽象的方式定义共享的行为 
  + 使用 _trait bounds_ 指定泛型是任何拥有特定行为的类型

  #+BEGIN_EXAMPLE
    注意：trait 类似于其他语言中的常被称为接口的功能，虽然有一些不同
  #+END_EXAMPLE

** 定义 trait
   一个类型的行为由其可供调用的方法构成。如果可以对不同类型调用相同的方法的话，这些类型就可以共享相同的行为了。trait 定义是一种将 _方法签名_ *组合* 起来的方法，目的是定义一个 *实现* _某些目的_ 所 _必需的行为_ 的 *集合* 

   #+BEGIN_EXAMPLE
     例如，这里有多个存放了不同类型和属性文本的结构体：

     结构体 NewsArticle 用于存放发生于世界各地的新闻故事，而结构体 Tweet 最多只能存放 280 个字符的内容，以及像是否转推或是否是对推友的回复这样的元数据

     如果想要创建一个多媒体聚合库用来显示可能储存在 NewsArticle 或 Tweet 实例中的数据的总结：每一个结构体都需要的行为是他们是能够被总结的

     这样的话就可以调用实例的 summarize 方法来请求总结

   #+END_EXAMPLE
   下面展示了一个表现这个概念的 Summary trait 的定义：

   #+BEGIN_SRC rust 
  pub trait Summary {
      fn summarize(&self) -> String;
  }
   #+END_SRC

   + 这里使用 _trait_ 关键字来 *声明* ，后面是 _trait 的名字_ : 例子中是 Summary
   + 在 _大括号_ 中声明描述实现这个 trait 的类型所需要的行为的方法签名：在这个例子中是 fn summarize(&self) -> String
   + 在方法签名后跟分号，而不是在大括号中提供其实现

   #+BEGIN_EXAMPLE
     每一个实现这个 trait 的类型都需要提供其自定义行为的方法体

     编译器也会确保任何实现 Summary trait 的类型都拥有与这个签名的定义完全一致的 summarize 方法
   #+END_EXAMPLE
   trait 体中可以有多个方法：一行一个方法签名且都以分号结尾

** 为类型实现 trait
   现在已经定义了 Summary trait，接着就可以在多媒体聚合库中需要拥有这个行为的类型上 _实现_ 它了。下面示例中展示了：
   + NewsArticle 结构体上 Summary trait 的一个实现，它使用标题、作者和创建的位置作为 summarize 的返回值
   + 对于 Tweet 结构体，选择将 summarize 定义为用户名后跟推文的全部文本作为返回值，并假设推文内容已经被限制为 280 字符以内

   #+BEGIN_SRC rust 
  pub struct NewsArticle {
      pub headline: String,
      pub location: String,
      pub author: String,
      pub content: String,
  }

  impl Summary for NewsArticle {
      fn summarize(&self) -> String {
	  format!("{}, by {} ({})", self.headline, self.author, self.location)
      }
  }

  pub struct Tweet {
      pub username: String,
      pub content: String,
      pub reply: bool,
      pub retweet: bool,
  }

  impl Summary for Tweet {
      fn summarize(&self) -> String {
	  format!("{}: {}", self.username, self.content)
      }
  }
   #+END_SRC

   在类型上实现 trait 类似于实现与 trait 无关的方法。区别在于 _impl 关键字_ 之后，提供需要 _实现 trait 的名称_ ，接着是 _for_ 和需要实现 trait 的 _类型的名称_ 

   #+BEGIN_EXAMPLE
     在 impl 块中，使用 trait 定义中的方法签名，不过不再后跟分号，而是需要在大括号中编写函数体来为特定类型实现 trait 方法所拥有的行为
   #+END_EXAMPLE

   一旦实现了 trait，就可以用与 NewsArticle 和 Tweet 实例的非 trait 方法一样的方式调用 trait 方法了：

   #+BEGIN_SRC rust 
  let tweet = Tweet {
      username: String::from("horse_ebooks"),
      content: String::from("of course, as you probably already know, people"),
      reply: false,
      retweet: false,
  };

  println!("1 new tweet: {}", tweet.summarize());
   #+END_SRC

   这会打印出：
   #+BEGIN_SRC sh 
1 new tweet: horse_ebooks: of course, as you probably already know, people
   #+END_SRC

   #+BEGIN_EXAMPLE
     注意：因为在相同的 lib.rs 里定义了 Summary trait 和 NewsArticle 与 Tweet 类型，所以他们是位于同一作用域的

     如果这个 lib.rs 是对应 aggregator crate 的，而别人想要利用我们 crate 的功能为其自己的库作用域中的结构体实现 Summary trait

     首先他们需要将 trait 引入作用域。这可以通过指定 use aggregator::Summary; 实现，这样就可以为其类型实现 Summary trait 了

     Summary 还必须是公有 trait 使得其他 crate 可以实现它，这也是为什么中将 pub 置于 trait 之前
   #+END_EXAMPLE

   实现 trait 时需要注意的一个限制：只有当 _trait_ 或者要实现 _trait 的类型_ 位于 _crate 的本地作用域_ 时，才能为该类型实现 trait
   #+BEGIN_EXAMPLE
     例如，可以为 aggregator crate 的自定义类型 Tweet 实现如标准库中的 Display trait，这是因为 Tweet 类型位于 aggregator crate 本地的作用域中

     类似地，也可以在 aggregator crate 中为 Vec<T> 实现 Summary，这是因为 Summary trait 位于 aggregator crate 本地作用域中
   #+END_EXAMPLE
   但是 *不能* 为 _外部类型_ 实现 _外部 trait_ 
   #+BEGIN_EXAMPLE
     例如，不能在 aggregator crate 中为 Vec<T> 实现 Display trait

     这是因为 Display 和 Vec<T> 都定义于标准库中，它们并不位于 aggregator crate 本地作用域中
   #+END_EXAMPLE 

   这个限制是被称为 _相干性_ 的程序属性的一部分，或者更具体的说是 _孤儿规则_ ，其得名于不存在父类型
   #+BEGIN_EXAMPLE
     这条规则确保了其他人编写的代码不会破坏你代码，反之亦然

     没有这条规则的话，两个 crate 可以分别对相同类型实现相同的 trait，而 Rust 将无从得知应该使用哪一个实现
   #+END_EXAMPLE

*** 默认实现
    可以为 trait 中的某些或全部方法提供 _默认的行为_ ，而不是在每个类型的每个实现中都定义自己的行为是很有用的

    #+BEGIN_EXAMPLE
    这样当为某个特定类型实现 trait 时，可以选择保留或重载每个方法的默认行为
    #+END_EXAMPLE

    下面展示了如何为 Summary trait 的 summarize 方法指定一个默认的字符串值，而不是只是定义方法签名：

    #+BEGIN_SRC rust 
  pub trait Summary {
      fn summarize(&self) -> String {
	  String::from("(Read more...)")
      }
  }
    #+END_SRC

    如果想要对 NewsArticle 实例使用这个默认实现，而不是定义一个自己的实现，则可以通过 _impl Summary for NewsArticle {}_ 指定一个 _空的 impl 块_ 

    #+BEGIN_SRC rust 
  impl Summary for NewsArticle {
  }
    #+END_SRC

    因为提供了一个默认实现并且指定 NewsArticle 实现 Summary trait。因此仍然可以对 NewsArticle 实例调用 summarize 方法，如下所示：

    #+BEGIN_SRC rust 
  let article = NewsArticle {
      headline: String::from("Penguins win the Stanley Cup Championship!"),
      location: String::from("Pittsburgh, PA, USA"),
      author: String::from("Iceburgh"),
      content: String::from("The Pittsburgh Penguins once again are the best
      hockey team in the NHL."),
  };

  println!("New article available! {}", article.summarize());
    #+END_SRC

    这段代码会打印：
    #+BEGIN_SRC sh 
New article available! (Read more...)。
    #+END_SRC

    #+BEGIN_EXAMPLE
      为 summarize 创建默认实现并不要求对 Tweet 上的 Summary 实现做任何改变

      其原因是重载一个默认实现的语法与实现没有默认实现的 trait 方法的语法一样
    #+END_EXAMPLE

    默认实现允许调用相同 trait 中的其他方法，哪怕这些方法没有默认实现。如此，trait 可以提供很多有用的功能而只需要实现指定一小部分内容。例如，可以定义 Summary trait，使其具有一个需要实现的 summarize_author 方法，然后定义一个 summarize 方法，此方法的默认实现调用 summarize_author 方法：

    #+BEGIN_SRC rust 
  pub trait Summary {
      fn summarize_author(&self) -> String;

      fn summarize(&self) -> String {
	  format!("(Read more from {}...)", self.summarize_author())
      }
  }
    #+END_SRC 

    为了使用这个版本的 Summary，只需在实现 trait 时定义 summarize_author 即可：
    #+BEGIN_SRC rust 
  impl Summary for Tweet {
      fn summarize_author(&self) -> String {
	  format!("@{}", self.username)
      }
  }
    #+END_SRC

    一旦定义了 summarize_author，就可以对 Tweet 结构体的实例调用 summarize 了，而 summary 的默认实现会调用提供的 summarize_author 定义。因为实现了 summarize_author，Summary trait 就提供了 summarize 方法的功能，且无需编写更多的代码：

    #+BEGIN_SRC rust 
  let tweet = Tweet {
      username: String::from("horse_ebooks"),
      content: String::from("of course, as you probably already know, people"),
      reply: false,
      retweet: false,
  };

  println!("1 new tweet: {}", tweet.summarize());
    #+END_SRC

    这会打印出：
    #+BEGIN_SRC sh 
1 new tweet: (Read more from @horse_ebooks...)
    #+END_SRC

    注意：无法从 _相同方法的重载_ 实现中调用 _默认_ 方法 

** trait 作为参数
   知道了如何定义 trait 和在类型上实现这些 trait 之后，可以探索一下如何使用 trait 来接受 *多种不同类型的参数* 

   例如：在前面为 NewsArticle 和 Tweet 类型实现了 Summary trait。可以定义一个函数 notify 来调用其参数 item 上的 summarize 方法，该参数是实现了 Summary trait 的某种类型。为此可以使用 impl Trait 语法，像这样：

   #+BEGIN_SRC rust 
  pub fn notify(item: impl Summary) {
      println!("Breaking news! {}", item.summarize());
  }
   #+END_SRC

   对于 item 参数，指定了 _impl 关键字_ 和 _trait 名称_ ，而不是具体的类型，该参数支持任何实现了指定 trait 的类型

   #+BEGIN_EXAMPLE
     在 notify 函数体中，可以调用任何来自 Summary trait 的方法，比如 summarize

     可以传递任何 NewsArticle 或 Tweet 的实例来调用 notify

     任何用其它如 String 或 i32 的类型调用该函数的代码都不能编译，因为它们没有实现 Summary
   #+END_EXAMPLE

*** Trait Bound 语法 
    impl Trait 语法实际上是一个语法糖。真正的语法被称为 _trait bound_ ，这看起来像： 

    #+BEGIN_SRC rust 
  pub fn notify<T: Summary>(item: T) {
      println!("Breaking news! {}", item.summarize());
  }
    #+END_SRC 

    这与之前的例子相同，不过稍微冗长了一些。trait bound 与泛型参数声明在一起，位于 _尖括号中的冒号_ 后面

    #+BEGIN_EXAMPLE
      impl Trait 很方便，适用于短小的例子

      而 trait bound 则适用于更复杂的场景
    #+END_EXAMPLE

    例如，可以获取两个实现了 Summary 的参数。使用 impl Trait 的语法看起来像这样：

    #+BEGIN_SRC rust 
  pub fn notify(item1: impl Summary, item2: impl Summary) {
    #+END_SRC

    这适用于 item1 和 item2 允许是不同类型的情况（只要它们都实现了 Summary）。不过如果你希望强制它们都是相同类型呢？这只有在使用 trait bound 时才有可能：

    #+BEGIN_SRC rust 
  pub fn notify<T: Summary>(item1: T, item2: T) {
    #+END_SRC

    泛型 _T_ 被指定为 item1 和 item2 的参数限制，如此传递给参数 item1 和 item2 值的具体类型必须一致 

**** 通过 + 指定多个 trait bound
     如果 notify 需要显示 item 的格式化形式，同时也要使用 summarize 方法，那么 item 就需要同时实现两个不同的 trait：Display 和 Summary。这可以通过 _+ 语法_ 实现：

     #+BEGIN_SRC rust 
  pub fn notify(item: impl Summary + Display) {
     #+END_SRC

     _+ 语法_ 也适用于泛型的 trait bound：
     #+BEGIN_SRC rust 
  pub fn notify<T: Summary + Display>(item: T) {
     #+END_SRC

     #+BEGIN_EXAMPLE
       通过指定这两个 trait bound，notify 的函数体可以调用 summarize 并使用 {} 来格式化 item
     #+END_EXAMPLE

**** 通过 where 简化 trait bound
     #+BEGIN_SRC rust 
  fn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32 {
     #+END_SRC

     #+BEGIN_EXAMPLE
       然而，使用过多的 trait bound 也有缺点

       每个泛型有其自己的 trait bound，所以有多个泛型参数的函数在名称和参数列表之间会有很长的 trait bound 信息，这使得函数签名难以阅读
     #+END_EXAMPLE

     为此，Rust 有另一个在函数签名之后的 _where 从句_ 中指定 trait bound 的语法。可以这么写：

     #+BEGIN_SRC rust 
  fn some_function<T, U>(t: T, u: U) -> i32
      where T: Display + Clone,
	    U: Clone + Debug
  {
     #+END_SRC

     #+BEGIN_EXAMPLE
       这个函数签名就显得不那么杂乱，函数名、参数列表和返回值类型都离得很近，看起来类似没有很多 trait bounds 的函数
     #+END_EXAMPLE

** 返回实现了 trait 的类型
   也可以在返回值中使用 impl Trait 语法，来返回实现了某个 trait 的类型：
   #+BEGIN_SRC rust 
  fn returns_summarizable() -> impl Summary {
      Tweet {
	  username: String::from("horse_ebooks"),
	  content: String::from("of course, as you probably already know, people"),
	  reply: false,
	  retweet: false,
      }
  }
   #+END_SRC

   通过使用 impl Summary 作为返回值类型，指定了 returns_summarizable 函数返回某个实现了 Summary trait 的类型，但是不确定其具体的类型。在这个例子中 returns_summarizable 返回了一个 Tweet，不过调用方并不知情

   #+BEGIN_EXAMPLE
     返回一个只是指定了需要实现的 trait 的类型的能力在闭包和迭代器场景十分的有用

     闭包和迭代器创建只有编译器知道的类型，或者是非常非常长的类型

     impl Trait 允许简单的指定函数返回一个 Iterator 而无需写出实际的冗长的类型
   #+END_EXAMPLE

   不过这只适用于返回 _单一类型_ 的情况。例如，这段代码的返回值类型指定为返回 impl Summary，但是返回了 NewsArticle 或 Tweet 就行不通：

   #+BEGIN_SRC rust 
  fn returns_summarizable(switch: bool) -> impl Summary {
      if switch {
	  NewsArticle {
	      headline: String::from("Penguins win the Stanley Cup Championship!"),
	      location: String::from("Pittsburgh, PA, USA"),
	      author: String::from("Iceburgh"),
	      content: String::from("The Pittsburgh Penguins once again are the best
	      hockey team in the NHL."),
	  }
      } else {
	  Tweet {
	      username: String::from("horse_ebooks"),
	      content: String::from("of course, as you probably already know, people"),
	      reply: false,
	      retweet: false,
	  }
      }
  }
   #+END_SRC

   编译会报如下的错误：
   #+BEGIN_SRC sh 
  error[E0308]: if and else have incompatible types
    --> src/main.rs:88:9
     |
  79 |   /     if switch {
  80 |   |         NewsArticle {
     |  _|_________-
  81 | | |             headline: String::from("Penguins win the Stanley Cup Championship!"),
  82 | | |             location: String::from("Pittsburgh, PA, USA"),
  83 | | |             author: String::from("Iceburgh"),
  84 | | |             content: String::from("The Pittsburgh Penguins once again are the best
  85 | | |             hockey team in the NHL."),
  86 | | |         }
     | |_|_________- expected because of this
  87 |   |     } else {
  88 | / |         Tweet {
  89 | | |             username: String::from("horse_ebooks"),
  90 | | |             content: String::from("of course, as you probably already know, people"),
  91 | | |             reply: false,
  92 | | |             retweet: false,
  93 | | |         }
     | |_|_________^ expected struct `NewsArticle`, found struct `Tweet`
  94 |   |     }
     |   |_____- if and else have incompatible types
     |
     = note: expected type `NewsArticle`
		found type `Tweet`
   #+END_SRC

** 使用 trait bounds 来修复 largest 函数
   #+BEGIN_EXAMPLE
     现在知道了如何使用泛型参数 trait bound 来指定所需的行为

     该回到前面示例中，来修复使用泛型类型参数的 largest 函数定义！
   #+END_EXAMPLE
   回顾一下，最后尝试编译代码时出现的错误是：

   #+BEGIN_SRC sh 
  error[E0369]: binary operation `>` cannot be applied to type `T`
   --> src/main.rs:5:12
    |
  5 |         if item > largest {
    |            ^^^^^^^^^^^^^^
    |
    = note: an implementation of `std::cmp::PartialOrd` might be missing for `T`
   #+END_SRC

   在 largest 函数体中想要使用大于运算符 > 比较两个 T 类型的值。这个运算符被定义为标准库中 trait _std::cmp::PartialOrd_ 的一个默认方法。所以需要在 T 的 trait bound 中指定 PartialOrd，这样 largest 函数可以用于任何可以比较大小的类型的 slice。因为 PartialOrd 位于 prelude 中所以并不需要手动将其引入作用域。将 largest 的签名修改为如下：

   #+BEGIN_SRC rust 
  fn largest<T: PartialOrd>(list: &[T]) -> T {
   #+END_SRC

   但是如果编译代码的话，会出现一些不同的错误：
   #+BEGIN_SRC sh 
  error[E0508]: cannot move out of type `[T]`, a non-copy slice
   --> src/main.rs:2:23
    |
  2 |     let mut largest = list[0];
    |                       ^^^^^^^
    |                       |
    |                       cannot move out of here
    |                       help: consider using a reference instead: `&list[0]`

  error[E0507]: cannot move out of borrowed content
   --> src/main.rs:4:9
    |
  4 |     for &item in list.iter() {
    |         ^----
    |         ||
    |         |hint: to prevent move, use `ref item` or `ref mut item`
    |         cannot move out of borrowed content
   #+END_SRC

   #+BEGIN_EXAMPLE
     错误的核心是 cannot move out of type [T], a non-copy slice

     对于非泛型版本的 largest 函数，只尝试了寻找最大的 i32 和 char。正如前面 “只在栈上的数据：拷贝” 部分讨论过的，像 i32 和 char 这样的类型是已知大小的并可以储存在栈上，所以他们实现了 Copy trait

     将 largest 函数改成使用泛型后，现在 list 参数的类型就有可能是没有实现 Copy trait 的。这意味着可能不能将 list[0] 的值移动到 largest 变量中，这导致了上面的错误
   #+END_EXAMPLE

   为了只对实现了 Copy 的类型调用这些代码，可以在 T 的 trait bounds 中增加 Copy：
   #+BEGIN_SRC rust 
  fn largest<T: PartialOrd + Copy>(list: &[T]) -> T {
      let mut largest = list[0];

      for &item in list.iter() {
	  if item > largest {
	      largest = item;
	  }
      }

      largest
  }

  fn main() {
      let number_list = vec![34, 50, 25, 100, 65];

      let result = largest(&number_list);
      println!("The largest number is {}", result);

      let char_list = vec!['y', 'm', 'a', 'q'];

      let result = largest(&char_list);
      println!("The largest char is {}", result);
  }
   #+END_SRC

   #+BEGIN_EXAMPLE
     如果并不希望限制 largest 函数只能用于实现了 Copy trait 的类型，可以在 T 的 trait bounds 中指定 Clone 而不是 Copy，这样将克隆 slice 的每一个值使得 largest 函数拥有其所有权

     使用 clone 函数意味着对于类似 String 这样拥有堆上数据的类型，会潜在的分配更多堆上空间，而堆分配在涉及大量数据时可能会相当缓慢

   #+END_EXAMPLE
   另一种 largest 的实现方式是返回在 slice 中 _T 值的引用_ 。如果将函数返回值从 T 改为 &T 并改变函数体使其能够返回一个引用，将不需要任何 Clone 或 Copy 的 trait bounds 而且也不会有任何的堆分配

** 使用 trait bound 有条件地实现方法
   通过使用带有 trait bound 的泛型参数的 impl 块，可以 *有条件* 地只为那些实现了特定 trait 的类型实现方法。例如：
   + 类型 Pair<T> 总是实现了 new 方法
   + 只有那些为 T 类型实现了 PartialOrd trait  和 Display trait 的 Pair<T> 才会实现 cmp_display 方法

   #+BEGIN_SRC rust 
  use std::fmt::Display;

  struct Pair<T> {
      x: T,
      y: T,
  }

  impl<T> Pair<T> {
      fn new(x: T, y: T) -> Self {
	  Self {
	      x,
	      y,
	  }
      }
  }

  impl<T: Display + PartialOrd> Pair<T> {
      fn cmp_display(&self) {
	  if self.x >= self.y {
	      println!("The largest member is x = {}", self.x);
	  } else {
	      println!("The largest member is y = {}", self.y);
	  }
      }
  }
   #+END_SRC

   也可以对任何实现了特定 trait 的类型有条件地实现 trait。对任何满足特定 trait bound 的类型实现 trait 被称为 _blanket implementations_ ，他们被广泛的用于 Rust 标准库中。例如，标准库为任何实现了 Display trait 的类型实现了 ToString trait。这个 impl 块看起来像这样：

   #+BEGIN_SRC rust 
  impl<T: Display> ToString for T {
      // --snip--
  }
   #+END_SRC

   因为标准库有了这些 blanket implementation，可以对任何实现了 Display trait 的类型调用由 ToString 定义的 to_string 方法。例如，可以将整型转换为对应的 String 值，因为整型实现了 Display：

   #+BEGIN_SRC rust 
  let s = 3.to_string();
   #+END_SRC

** 总结
   trait 和 trait bound 让使用泛型类型参数来减少重复，并仍然能够向编译器明确指定泛型类型需要拥有哪些行为。因为向编译器提供了 trait bound 信息，它就可以检查代码中所用到的具体类型是否提供了正确的行为

   #+BEGIN_EXAMPLE
     在动态类型语言中，如果尝试调用一个类型并没有实现的方法，会在运行时出现错误

     Rust 将这些错误移动到了编译时，甚至在代码能够运行之前就强迫修复这样的错误

     另外，也无需编写运行时检查行为的代码，因为在编译时就已经检查过了，这样相比其他那些不愿放弃泛型灵活性的语言有更好的性能
   #+END_EXAMPLE
* 生命周期
