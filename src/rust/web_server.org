#+TITLE: Web服务器
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: advanced.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil

作为最后的项目，将要实现一个返回 “hello” 的 web server，它在浏览器中看起来就如下所示：

   #+ATTR_HTML: image :width 30% 
   [[file:pic/trpl20-01.png]] 

如下是将怎样构建此 web server 的计划：
1. 学习一些 TCP 与 HTTP 知识
2. 在套接字socket上监听 TCP 请求
3. 解析少量的 HTTP 请求
4. 创建一个合适的 HTTP 响应
5. 通过线程池改善 server 的吞吐量

#+BEGIN_EXAMPLE
  不过在开始之前，需要提到一点细节：这里使用的方法并不是使用 Rust 构建 web server 最好的方法

  crates.io 上有很多可用于生产环境的 crate，它们提供了比我们所要编写的更为完整的 web server 和线程池实现

  然而，我们的目的在于学习自己编写一个基础的 HTTP server 和线程池，以便学习将来可能用到的 crate 背后的通用理念和技术

  这里也展示了选择处理什么层次的抽象，并能够选择比其他语言可能或可用的层次更低的层次
#+END_EXAMPLE
* 构建单线程 web server
* 多线程 web server  
* 优雅停机
