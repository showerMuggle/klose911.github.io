#+TITLE: 设计
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_UP: concept.html   
#+HTML_LINK_HOME: kubernates-architecture.html
#+OPTIONS: num:nil timestamp:nil ^:nil

#+begin_example
  分析和理解 Kubernetes 的设计理念可以更深入地了解 Kubernetes 系统，更好地利用它管理分布式部署的云原生应用

  另一方面也可以借鉴其在分布式系统设计方面的经验
#+end_example
* 分层架构
  Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，如下图所示：

  #+ATTR_HTML: image :width 70% 
  [[file:../pic/kubernetes-layers-arch.jpg]]

  + 核心层：Kubernetes 最核心的功能，对外 _提供 API_ 构建高层的应用，对内提供 _插件式应用执行环境_ 
  + 应用层： *部署* （无状态应用、有状态应用、批处理任务、集群应用等）和 *路由* （服务发现、DNS 解析等）
  + 管理层： _系统度量_ （如基础设施、容器和网络的度量）， _自动化_ （如自动扩展、动态 Provision 等）以及 _策略管理_ （RBAC、Quota、PSP、NetworkPolicy 等）
  + 接口层： _kubectl 命令行_ 工具、 _客户端 SDK_  以及 _集群联邦_ 
  + 生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴
    + Kubernetes 外部： 日志 、 监控 、 配置管理、CI、CD、Workflow、FaaS、OTS 应用、ChatOps 等
    + Kubernetes 内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等
* API 设计原则
  #+begin_example
    对于云计算系统，系统 API 实际上处于系统设计的统领地位，正如本文前面所说，Kubernetes 集群系统每支持一项新功能，引入一项新技术，一定会新引入对应的 API 对象，支持对该功能的管理操作，理解掌握的 API，就好比抓住了 Kubernetes 系统的牛鼻子
  #+end_example
  Kubernetes 系统 API 的设计有以下几条原则：
  1. *所有 API 应该是声明式的* 
     #+begin_example
       声明式的操作，相对于命令式操作，对于重复操作的效果是稳定的，这对于容易出现数据丢失或重复的分布式环境来说是很重要的

       另外，声明式操作更容易被用户使用，可以使系统向用户隐藏实现的细节，隐藏实现的细节的同时，也就保留了系统未来持续优化的可能性

       此外，声明式的 API，同时隐含了所有的 API 对象都是名词性质的，例如 Service、Volume 这些 API 都是名词，这些名词描述了用户所期望得到的一个目标分布式对象
     #+end_example
  2.  *API 对象是彼此互补而且可组合的* 
     #+begin_example
       这里面实际是鼓励 API 对象尽量实现面向对象设计时的要求，即 “高内聚，松耦合”，对业务相关的概念有一个合适的分解，提高分解出来的对象的可重用性

       事实上，Kubernetes 这种分布式系统管理平台，也是一种业务系统，只不过它的业务就是调度和管理容器服务
     #+end_example
  3.  *高层 API 以操作意图为基础设计* 
     #+begin_example
       如何能够设计好 API，跟如何能用面向对象的方法设计好应用系统有相通的地方，高层设计一定是从业务出发，而不是过早的从技术实现出发

       因此，针对 Kubernetes 的高层 API 设计，一定是以 Kubernetes 的业务为基础出发，也就是以系统调度管理容器的操作意图为基础设计
     #+end_example
  4. *低层 API 根据高层 API 的控制需要设计* 
     #+begin_example
       设计实现低层 API 的目的，是为了被高层 API 使用，考虑减少冗余、提高重用性的目的

       低层 API 的设计也要以需求为基础，要尽量抵抗受技术实现影响的诱惑
     #+end_example
  5.  *尽量避免简单封装* ，不要有在外部 API 无法显式知道的内部隐藏的机制
     #+begin_example
       简单的封装，实际没有提供新的功能，反而增加了对所封装 API 的依赖性，内部隐藏的机制也是非常不利于系统维护的设计方式

       例如 StatefulSet 和 ReplicaSet，本来就是两种 Pod 集合，那么 Kubernetes 就用不同 API 对象来定义它们，而不会说只用同一个 ReplicaSet，内部通过特殊的算法再来区分这个 ReplicaSet 是有状态的还是无状态
     #+end_example
  6. *API 操作复杂度与对象数量成正比* 
     #+begin_example
       这一条主要是从系统性能角度考虑，要保证整个系统随着系统规模的扩大，性能不会迅速变慢到无法使用，那么最低的限定就是 API 的操作复杂度不能超过 O(N)，N 是对象的数量，否则系统就不具备水平伸缩性了
     #+end_example
  7. *API 对象状态不能依赖于网络连接状态* 
     #+begin_example
       众所周知，在分布式环境下，网络连接断开是经常发生的事情，因此要保证 API 对象状态能应对网络的不稳定，API 对象的状态就不能依赖于网络连接状态
     #+end_example
  8. *尽量避免让操作机制依赖于全局状态，因为在分布式系统中要保证全局状态的同步是非常困难的* 
* 控制机制设计原则
  + *控制逻辑应该只依赖于当前状态* 
    #+begin_example
      这是为了保证分布式系统的稳定可靠。对于经常出现局部错误的分布式系统，如果控制逻辑只依赖当前状态，那么就非常容易将一个暂时出现故障的系统恢复到正常状态

      因为只要将该系统重置到某个稳定状态，就可以自信的知道系统的所有控制逻辑会开始按照正常方式运行
    #+end_example
  + *假设任何错误的可能，并做容错处理* 
    #+begin_example
      在一个分布式系统中出现局部和临时错误是大概率事件。错误可能来自于物理系统故障，外部系统故障也可能来自于系统自身的代码错误

      依靠自己实现的代码不会出错来保证系统稳定其实也是难以实现的，因此要设计对任何可能错误的容错处理
    #+end_example
  + *尽量避免复杂状态机，控制逻辑不要依赖无法监控的内部状态* 
    #+begin_example
      因为分布式系统各个子系统都是不能严格通过程序内部保持同步的，所以如果两个子系统的控制逻辑如果互相有影响，那么子系统就一定要能互相访问到影响控制逻辑的状态，否则，就等同于系统里存在不确定的控制逻辑
    #+end_example
  + *假设任何操作都可能被任何操作对象拒绝，甚至被错误解析* 
    #+begin_example
      由于分布式系统的复杂性以及各子系统的相对独立性，不同子系统经常来自不同的开发团队，所以不能奢望任何操作被另一个子系统以正确的方式处理，要保证出现错误的时候，操作级别的错误不会影响到系统稳定性
    #+end_example
  + *每个模块都可以在出错后自动恢复* 
    #+begin_example
      由于分布式系统中无法保证系统各个模块是始终连接的，因此每个模块要有自我修复的能力，保证不会因为连接不到其他模块而自我崩溃
    #+end_example
  + *每个模块都可以在必要时优雅地降级服务* 
    #+begin_example
      所谓优雅地降级服务，是对系统鲁棒性的要求，即要求在设计实现模块时划分清楚基本功能和高级功能，保证基本功能不会依赖高级功能，这样同时就保证了不会因为高级功能出现故障而导致整个模块崩溃

      根据这种理念实现的系统，也更容易快速地增加新的高级功能，因为不必担心引入高级功能影响原有的基本功能
    #+end_example
* Kubernetes 的API 对象
_API 对象_ 是 Kubernetes 集群中的 *管理操作单元* 

#+BEGIN_EXAMPLE
  Kubernetes 集群系统每支持一项新功能，引入一项新技术，一定会新引入对应的 API 对象，支持对该功能的管理操作

  例如副本集 Replica Set 对应的 API 对象是 RS
#+END_EXAMPLE

每个 API 对象都有 3 大类属性：
+ *元数据* _metadata_ : 用来 _标识 API 对象_ 的，每个对象都至少有 3 个元数据：
  + namespace
  + name
  + uid
  + 除此以外还有各种各样的标签 labels 用来标识和匹配不同的对象
    #+BEGIN_EXAMPLE
      例如用户可以用标签 env 来标识区分不同的服务部署环境

      分别用 env=dev、env=testing、env=production 来标识开发、测试、生产的不同服务
    #+END_EXAMPLE
+ *规范* _spec_ : 描述了用户期望 Kubernetes 集群中的分布式系统达到的 _理想状态_ 
  #+BEGIN_EXAMPLE
    例如用户可以通过复制控制器 Replication Controller 设置期望的 Pod 副本数为 3
  #+END_EXAMPLE
+ *状态* _status_ : 描述了系统实际 _当前达到的状态_ 
  #+BEGIN_EXAMPLE
    例如系统当前实际的 Pod 副本数为 2，那么复制控制器当前的程序逻辑就是自动启动新的 Pod，争取达到副本数为 3
  #+END_EXAMPLE


Kubernetes 中所有的配置都是通过 API 对象的 spec 去设置的，也就是用户通过配置系统的理想状态来改变系统。这是 Kubernetes 重要设计理念之一：即所有的操作都是声明式，的而不是命令式的

#+BEGIN_EXAMPLE
  声明式操作在分布式系统中的好处是稳定，不怕丢操作或运行多次，例如设置副本数为 3 的操作运行多次也还是一个结果

  而给副本数加 1 的操作就不是声明式的，运行多次结果就错了
#+END_EXAMPLE

** Pod 
#+BEGIN_EXAMPLE
Kubernetes 有很多技术概念，同时对应很多 API 对象，最重要的也是最基础的是 Pod
#+END_EXAMPLE
Pod 是在 Kubernetes 集群中 *运行部署应用或服务的最小单元* 
+ Pod 的设计理念：支持 _多个容器_ 在一个 Pod 中 *共享* _网络地址_ 和 _文件系统_ ，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务

#+BEGIN_EXAMPLE
  Pod 对多容器的支持是 K8 最基础的设计理念

  比如运行一个操作系统发行版的软件仓库，一个 Nginx 容器用来发布软件，另一个容器专门用来从源仓库做同步

  这两个容器的镜像不太可能是一个团队开发的，但是他们一块儿工作才能提供一个微服务

  这种情况下，不同的团队各自开发构建自己的容器镜像，在部署的时候组合成一个微服务对外提供服务
#+END_EXAMPLE

+ Pod 是 Kubernetes 集群中 _所有业务类型的基础_ 

#+BEGIN_EXAMPLE
  Pod 可以看作运行在 Kubernetes 集群中的小机器人，不同类型的业务就需要不同类型的小机器人去执行

  目前 Kubernetes 中的业务主要可以分为长期伺服型（long-running）、批处理型（batch）、节点后台支撑型（node-daemon）和有状态应用型（stateful application）

  分别对应的小机器人控制器为 Deployment、Job、DaemonSet 和 StatefulSet
#+END_EXAMPLE

** Replication Controller 
RC 是 Kubernetes 集群中最早的保证 Pod 高可用的 API 对象。通过 *监控* 运行中的 Pod 来保证 _集群中运行指定数目的 Pod 副本_ ，指定的数目可以是多个也可以是 1 个
+ 少于指定数目，RC 就会启动运行新的 Pod 副本
+ 多于指定数目，RC 就会杀死多余的 Pod 副本
+ 即使在指定数目为 1 的情况下，通过 RC 运行 Pod 也比直接运行 Pod 更明智，因为 RC 也可以发挥它高可用的能力，保证永远有 1 个 Pod 在运行
#+BEGIN_EXAMPLE
  RC 是 Kubernetes 较早期的技术概念，只适用于长期伺服型的业务类型，比如控制小机器人提供高可用的 Web 服务
#+END_EXAMPLE

** Replication Set 
RS 是新一代 RC，提供同样的高可用能力，区别主要在于 RS 后来居上，能 *支持更多种类的匹配模式* 

#+BEGIN_EXAMPLE
  副本集对象一般不单独使用，而是作为 Deployment 的理想状态参数使用
#+END_EXAMPLE

** Deployment

** Service 
** Job 
** DaemonSet 
** Stateful Set 
** Federation 
** Volume 
*** Persistent Volume 
*** Persisten Volume Claim 
** Node 
** Secret 
** Account 
*** User Account 
*** Service Account 
** Namespace 
** RBAC 
* 总结

