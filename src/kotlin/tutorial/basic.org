#+TITLE: 基本语法
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/main.css" />
#+HTML_LINK_HOME: ./tutorial.html
#+OPTIONS: num:nil timestamp:nil ^:nil
* 包的定义与导入

  包的声明应处于源文件顶部：

  #+begin_src kotlin 
    package my.demo

    import kotlin.text.*

    // ……
  #+end_src

  目录与包的结构无需匹配：源代码可以在文件系统的任意位置
* 程序入口点
  Kotlin 应用程序的入口点是 _main_ 函数

  #+begin_src kotlin 
    fun main() {
	println("Hello world!")
    }
  #+end_src
* 函数
  带有两个 Int 参数、返回 Int 的函数：

  #+begin_src kotlin 
    //sampleStart
    fun sum(a: Int, b: Int): Int {
	return a + b
    }
    //sampleEnd

    fun main() {
	print("sum of 3 and 5 is ")
	println(sum(3, 5))
    }
  #+end_src

  将表达式作为函数体、返回值类型自动推断的函数：

  #+begin_src kotlin 
    //sampleStart
    fun sum(a: Int, b: Int) = a + b
    //sampleEnd

    fun main() {
	println("sum of 19 and 23 is ${sum(19, 23)}")
    }
  #+end_src

  函数返回无意义的值：

  #+begin_src kotlin 
    //sampleStart
    fun printSum(a: Int, b: Int): Unit {
	println("sum of $a and $b is ${a + b}")
    }
    //sampleEnd

    fun main() {
	printSum(-1, 8)
    }
  #+end_src

  _Unit_ 返回类型可以省略：

  #+begin_src kotlin 
    //sampleStart
    fun printSum(a: Int, b: Int) {
	println("sum of $a and $b is ${a + b}")
    }
    //sampleEnd

    fun main() {
	printSum(-1, 8)
    }
  #+end_src
* 变量
  定义 *只读* _局部变量_ 使用关键字 _val_ 定义。只能为其赋值一次：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	val a: Int = 1  // 立即赋值
	val b = 2   // 自动推断出 `Int` 类型
	val c: Int  // 如果没有初始值类型不能省略
	c = 3       // 明确赋值
	//sampleEnd
	println("a = $a, b = $b, c = $c")
    }
  #+end_src

  可 *重新赋值* 的变量使用  _var_  关键字：

  #+begin_src kotlin 
    fun main() {
	//sampleStart
	var x = 5 // 自动推断出 `Int` 类型
	x += 1
	//sampleEnd
	println("x = $x")
    }
  #+end_src

  顶层变量：

  #+begin_src kotlin 
    //sampleStart
    val PI = 3.14
    var x = 0

    fun incrementX() { 
		       x += 1 
    }
    //sampleEnd

    fun main() {
	println("x = $x; PI = $PI")
	incrementX()
	println("incrementX()")
	println("x = $x; PI = $PI")
    }
  #+end_src
* 注释
  
  与大多数现代语言一样，Kotlin 支持 _单行_ （或行末）与 _多行_ （块）注释：

  #+begin_src kotlin 
    // 这是一个行注释

    /* 这是一个多行的
     块注释。 */
  #+end_src

  Kotlin 中的块注释可以嵌套：

  #+begin_src kotlin 
    /* 注释从这里开始
    /* 包含嵌套的注释 */     
     并且在这里结束。 */
  #+end_src
* 字符串模板
  #+begin_src kotlin 
    fun main() {
	//sampleStart
	var a = 1
	// 模板中的简单名称：
	val s1 = "a is $a" 

	a = 2
	// 模板中的任意表达式：
	val s2 = "${s1.replace("is", "was")}, but now is $a"
	//sampleEnd
	println(s2)
    }
  #+end_src
* 条件表达式

