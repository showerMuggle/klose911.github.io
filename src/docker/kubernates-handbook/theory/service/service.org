#+TITLE: Service
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_HOME: index.html
#+OPTIONS: num:nil timestamp:nil ^:nil

Kubernetes Pod 是有生命周期的，它们可以被创建，也可以被销毁，然而一旦被销毁生命就永远结束。 通过 ReplicationController 能够动态地创建和销毁 Pod

#+BEGIN_EXAMPLE
  每个 Pod 都会获取它自己的 IP 地址，即使这些 IP 地址不总是稳定可依赖的

  这会导致一个问题：在 Kubernetes 集群中，如果一组 Pod（称为 backend）为其它 Pod （称为 frontend）提供服务，那么那些 frontend 该如何发现，并连接到这组 Pod 中的哪些 backend 呢？
#+END_EXAMPLE
* 概念
  Kubernetes Service 定义了这样一种抽象：
  + 一个 *Pod* 的 _逻辑分组_ 
  + 一种可以 *访问* 它们的 _策略_ ，通常称为微服务
    + 这一组 Pod 能够被 Service 访问到，通常是通过 _Label Selector_ 实现的 

  #+BEGIN_EXAMPLE
    举个例子，考虑一个图片处理 backend，它运行了3个副本，这些副本是可互换的，而 frontend 不需要关心它们调用了哪个 backend 副本

    然而组成这一组 backend 程序的 Pod 实际上可能会发生变化，frontend 客户端不应该也没必要知道，而且也不需要跟踪这一组 backend 的状态

    Service 定义的抽象能够解耦这种关联
  #+END_EXAMPLE

  + 对 Kubernetes 集群中的应用，Kubernetes 提供了简单的 _Endpoints API_ ，只要 Service 中的一组 _Pod_ 发生 *变更* ， _应用程序_ 就会 *被更新* 
  + 对非 Kubernetes 集群中的应用，Kubernetes 提供了基于 _VIP_ 的 *网桥* 的方式 *访问* _Service_ ，再由 Service  *重定向* 到 backend Pod
* 定义
  一个 Service 在 Kubernetes 中是一个 _REST 对象_ ，和 Pod 类似。 像所有的 REST 对象一样， Service 定义可以基于 POST 方式，请求 apiserver 创建新的实例

  #+BEGIN_EXAMPLE
    例如，假定有一组 Pod，它们对外暴露了 9376 端口，同时还被打上 "app=MyApp" 标签
  #+END_EXAMPLE

  #+BEGIN_EXAMPLE
    kind: Service
    apiVersion: v1
    metadata:
      name: my-service
    spec:
      selector:
	app: MyApp
      ports:
	- protocol: TCP
	  port: 80
	  targetPort: 9376
  #+END_EXAMPLE

  上述配置将创建一个名称为 _my-service_ 的 *Service 对象* ，它会将请求代理到使用 _TCP_ 端口 _9376_ ，并且具有标签 _app=MyApp_ 的 Pod 上：
  + 这个 Service 将被指派一个 IP 地址（通常称为 _Cluster IP_ ），它会被 _服务的代理_ 使用
  + 该 Service 的 selector 将会持续评估，处理结果将被 _POST_ 到一个名称为 _my-service_ 的 *Endpoints 对象* 上 

  #+BEGIN_EXAMPLE
    Service 能够将一个接收端口映射到任意的 targetPort，默认情况下，targetPort 将被设置为与 port 字段相同的值

    更有趣的是，targetPort 可以是一个字符串，引用了 backend Pod 的一个端口的名称，但是，实际指派给该端口名称的端口号，在每个 backend Pod 中可能并不相同

    对于部署和设计 Service ，这种方式会提供更大的灵活性。例如，可以在 backend 软件下一个版本中，修改 Pod 暴露的端口，并不会中断客户端的调用
  #+END_EXAMPLE

  Kubernetes Service 支持 _TCP_ 和 _UDP_ 协议，默认 TCP 协议 
** 没有 selector 的 Service
   Service 抽象了该如何访问 Kubernetes Pod，但也能够抽象其它类型的 backend，例如：
   + 希望在生产环境中使用外部的数据库集群，但测试环境使用自己的数据库
   + 希望服务指向另一个 Namespace 中或其它集群中的服务
   + 正在将工作负载转移到 Kubernetes 集群，和运行在 Kubernetes 集群之外的 backend 

   在任何这些场景中，都能够定义没有 selector 的 Service ：

   #+BEGIN_EXAMPLE
     kind: Service
     apiVersion: v1
     metadata:
       name: my-service
     spec:
       ports:
	 - protocol: TCP
	   port: 80
	   targetPort: 9376
   #+END_EXAMPLE

   由于这个 Service 没有 selector，就不会创建相关的 Endpoints 对象。可以手动将 Service 映射到指定的 Endpoints：

   #+BEGIN_EXAMPLE
     kind: Endpoints
     apiVersion: v1
     metadata:
       name: my-service
     subsets:
       - addresses:
	   - ip: 1.2.3.4
	 ports:
	   - port: 9376
   #+END_EXAMPLE

   注意：Endpoint IP 地址不能是 loopback（ _127.0.0.0/8_ ）、 link-local（ _169.254.0.0/16_ ）、或者 link-local 多播（ _224.0.0.0/24_ ）

   #+BEGIN_EXAMPLE
     访问没有 selector 的 Service，与有 selector 的 Service 的原理相同

     请求将被路由到用户定义的 Endpoint（该示例中为 1.2.3.4:9376）
   #+END_EXAMPLE

   _ExternalName_ Service 是 Service 的特例，它没有 selector，也没有定义任何的端口和 Endpoint。相反地，对于运行在集群外部的服务，它通过返回 _该外部服务的别名_ 这种方式来提供服务：

   #+BEGIN_EXAMPLE
     kind: Service
     apiVersion: v1
     metadata:
       name: my-service
       namespace: prod
     spec:
       type: ExternalName
       externalName: my.database.example.com
   #+END_EXAMPLE

   当查询主机 my-service.prod.svc.CLUSTER时，集群的 DNS 服务将返回一个值为 _my.database.example.com_ 的 _CNAME 记录_ 。访问这个服务的工作方式与其它的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发

   #+BEGIN_EXAMPLE
     如果后续决定要将数据库迁移到 Kubernetes 集群中，可以启动对应的 Pod，增加合适的 Selector 或 Endpoint，修改 Service 的 type
   #+END_EXAMPLE
* VIP 和 Service 代理
  在 Kubernetes 集群中，每个 Node 运行一个 _kube-proxy_ *进程* ：负责为 Service 实现了一种 _VIP_ *虚拟 IP* 的形式，而不是 ExternalName 的形式 

  #+BEGIN_EXAMPLE
    在 Kubernetes v1.0 版本，代理完全在 userspace，Service 是 “4层”（TCP/UDP over IP）概念

    在 Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。新增了 Ingress API（beta 版），用来表示 “7层”（HTTP）服务 

    从 Kubernetes v1.2 起，默认就是 iptables 代理 

    在 Kubernetes v1.8.0-beta.0 中，添加了ipvs代理 
  #+END_EXAMPLE
** userspace 代理模式
   1. kube-proxy 会 *监视* Kubernetes _master_ 对 _Service 对象_ 和 _Endpoints 对象_ 的 _添加_ 和 _移除_  
      + 对每个 Service，它会在本地 Node 上 *打开* 一个 _端口_ （ 随机选择） 
   2. 任何连接到 _代理端口_ 的请求，都会被代理到 Service 的 _backend Pods_ 中的某个上面（如 Endpoints 所报告的一样）
      + 使用哪个 backend Pod，是基于 Service 的 _SessionAffinity_ 来确定的 
   3. 它安装 _iptables 规则_ ，捕获到达该 Service 的 _clusterIP_ （虚拟 IP）和 _Port_ 的 _请求_ ，并 *重定向* 到 _代理端口_
   4. _代理端口_ 再 *代理请求* 到 _backend Pod_ ，网络返回的结果是，任何到达 Service 的 IP:Port 的请求，都会被代理到一个合适的 backend，不需要客户端知道关于 Kubernetes、Service、或 Pod 的任何信息

      #+ATTR_HTML: image :width 70% 
      [[file:../../pic/services-userspace-overview.jpg]]


   默认的策略是，通过 _round-robin_ 算法来选择 _backend Pod_ 

   #+BEGIN_EXAMPLE
     实现基于客户端 IP 的会话亲和性，可以通过设置 service.spec.sessionAffinity 的值为 "ClientIP" （默认值为 "None"）
   #+END_EXAMPLE
** iptables 代理模式
   1. kube-proxy 会监视 Kubernetes master 对 Service 对象和 Endpoints 对象的添加和移除
   2. 对每个 _Service_ ，它会安装 _iptables 规则_ ，从而 *捕获* 到达该 Service 的 _clusterIP_ （虚拟 IP）和 _端口_ 的请求
   3. 将请求 *重定向* 到 Service 的一组 _backend_ 中的 _某个_ 上面
   4. 对于每个 _Endpoints_ 对象，它也会安装 _iptables 规则_ ，这个规则会 *选择* 一个 _backend Pod_ 

   #+BEGIN_EXAMPLE
     和 userspace 代理类似，网络返回的结果是，任何到达 Service 的 IP:Port 的请求，都会被代理到一个合适的 backend，不需要客户端知道关于 Kubernetes、Service、或 Pod 的任何信息。

     这应该比 userspace 代理更快、更可靠。然而，不像 userspace 代理，如果初始选择的 Pod 没有响应，iptables 代理不能自动地重试另一个 Pod，所以它需要依赖 readiness probes
   #+END_EXAMPLE

   #+ATTR_HTML: image :width 70% 
   [[file:../../pic/services-iptables-overview.jpg]]

   默认的策略是， *随机* 选择一个 backend

   #+BEGIN_EXAMPLE
     实现基于客户端 IP 的会话亲和性，可以将 service.spec.sessionAffinity 的值设置为 "ClientIP" （默认值为 "None"）
   #+END_EXAMPLE
** ipvs 代理模式
   1. kube-proxy会监视Kubernetes Service对象和Endpoints
   2. 调用 _netlink_ 接口以相应地 *创建* _ipvs规则_
   3. 定期与Kubernetes Service对象和Endpoints对象同步ipvs规则，以确保ipvs状态与期望一致
   4. 访问服务时， _流量_ 将被 *重定向* 到其中一个 _后端Pod_ 

   #+BEGIN_EXAMPLE
     与 iptables 类似，ipvs基于 netfilter 的 hook 功能，但使用 哈希表 作为 底层数据结构 并在 内核空间 中工作

     这意味着ipvs可以更快地重定向流量，并且在同步代理规则时具有更好的性能
   #+END_EXAMPLE

   #+ATTR_HTML: image :width 70% 
   [[file:../../pic/service-ipvs-overview.png]] 

   此外，ipvs为 _负载均衡算法_ 提供了更多选项，例如：
   + rr：轮询调度
   + lc：最小连接数
   + dh：目标哈希
   + sh：源哈希
   + sed：最短期望延迟
   + nq： 不排队调度

   #+BEGIN_EXAMPLE
     注意： ipvs模式假定在运行kube-proxy之前在节点上都已经安装了IPVS内核模块

     当kube-proxy以ipvs代理模式启动时，kube-proxy将验证节点上是否安装了IPVS模块，如果未安装，则kube-proxy将回退到iptables代理模式
   #+END_EXAMPLE

* 多端口 Service 
  很多 Service 需要暴露多个端口。对于这种情况，Kubernetes 支持在 _Service 对象_ 中定义多个端口。 当使用多个端口时，必须给出所有的端口的名称，这样 Endpoint 就不会产生歧义，例如：

  #+BEGIN_EXAMPLE
    kind: Service
    apiVersion: v1
    metadata:
      name: my-service
    spec:
	selector:
	  app: MyApp
	ports:
	  - name: http
	    protocol: TCP
	    port: 80
	    targetPort: 9376
	  - name: https
	    protocol: TCP
	    port: 443
	    targetPort: 9377
  #+END_EXAMPLE

* 选择自己的 IP 地址
  在 Service 创建的请求中，可以通过设置 _spec.clusterIP_ 字段来 *指定* _自己的集群 IP 地址_ 

  #+BEGIN_EXAMPLE
    比如，希望替换一个已经存在的 DNS 条目，或者遗留系统已经配置了一个固定的 IP 且很难重新配置

    用户选择的 IP 地址必须合法，并且这个 IP 地址在 service-cluster-ip-range CIDR 范围内，这对 API Server 来说是通过一个标识来指定的

    如果 IP 地址不合法，API Server 会返回 HTTP 状态码 422，表示值不合法
  #+END_EXAMPLE

** 为何不使用 round-robin DNS？
   #+BEGIN_EXAMPLE
     一个不时出现的问题是，为什么都使用 VIP 的方式，而不使用标准的 round-robin DNS
   #+END_EXAMPLE
   有如下几个原因：
   + 长久以来，DNS 库都没能认真对待 DNS TTL、缓存域名查询结果
   + 很多应用只查询一次 DNS 并缓存了结果
   + 就算应用和库能够正确查询解析，每个客户端反复重解析造成的负载也是非常难以管理的

   #+BEGIN_EXAMPLE
     尽力阻止用户做那些对他们没有好处的事情，如果很多人都来问这个问题，可能会选择实现它
   #+END_EXAMPLE

* 服务发现 
