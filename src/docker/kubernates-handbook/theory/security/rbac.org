#+TITLE: 基于角色的访问控制
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: service_account.html
#+HTML_LINK_HOME: security.html
#+OPTIONS: num:nil timestamp:nil ^:nil

基于角色的访问控制（ _Role-Based Access Control_ ）使用 _rbac.authorization.k8s.io_ API Group 实现 *授权* 决策，允许管理员通过 Kubernetes API 动态配置策略

#+BEGIN_EXAMPLE
  要启用 RBAC，请使用 --authorization-mode=RBAC 启动 API Server
#+END_EXAMPLE
* API 

  接下来将介绍 RBAC API 所定义的四种顶级类型

  #+BEGIN_EXAMPLE
    用户可以像使用其他 Kubernetes API 资源一样 （例如通过 kubectl、API 调用等）与这些资源进行交互

    例如，命令 kubectl create -f (resource).yml 可以被用于以下所有的例子
  #+END_EXAMPLE
** Role 与 ClusterRole
   在 RBAC API 中，一个 _角色_ 包含了一套表示 _一组权限_ 的规则：
   + 权限以纯粹的 *累加* 形式累积（没有” 否定” 的规则）
     + 角色可以由 _namespace_ 内的 *Role* 对象定义
     + 整个 _Kubernetes 集群_ 范围内有效的角色则通过 *ClusterRole* 对象实现 

   一个 Role 对象只能用于授予对某一单一命名空间中资源的访问权限

   #+BEGIN_SRC yaml 
  kind: Role
  metadata:
    namespace: default
    name: pod-reader
  rules:
  - apiGroups: [""] # 空字符串"" 表明使用 core API group
    resources: ["pods"]
    verbs: ["get", "watch", "list"]
   #+END_SRC

   #+BEGIN_EXAMPLE
     以上示例描述了 _default_ 命名空间中的一个 Role 对象的定义，用于授予对 pod 的读访问权限
   #+END_EXAMPLE

   ClusterRole 对象可以授予与 Role 对象相同的权限，但由于它们属于集群范围对象， 用它们授予对以下几种资源的访问权限：
   + 集群范围资源
     #+BEGIN_EXAMPLE
       例如节点，即 node
     #+END_EXAMPLE
   + 非资源类型 endpoint
     #+BEGIN_EXAMPLE
       例如”/healthz”
     #+END_EXAMPLE
   + 跨所有命名空间的命名空间范围资源
     #+BEGIN_EXAMPLE
       例如 pod，需要运行命令 kubectl get pods --all-namespaces 来查询集群中所有的 pod
     #+END_EXAMPLE

   #+BEGIN_SRC yaml
  kind: ClusterRole
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    # 鉴于 ClusterRole 是集群范围对象，所以这里不需要定义 "namespace" 字段
    name: secret-reader
  rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "watch", "list"]
   #+END_SRC

   #+BEGIN_EXAMPLE
     示例中的 ClusterRole 定义可用于授予用户对某一特定命名空间，或者所有命名空间中的 secret（取决于其 绑定 方式）的读访问权限
   #+END_EXAMPLE
** RoleBinding 与 ClusterRoleBinding
   角色绑定将一个角色中定义的各种权限授予一个或者一组用户：
   + 角色绑定包含了一组相关主体：
     + 用户 User
     + 用户组 Group
     + 服务账户 Service Account
     + 对被授予角色的引用
   + 在命名空间中可以通过 RoleBinding 对象授予权限
   + 集群范围的权限授予则通过 ClusterRoleBinding 对象完成 

   RoleBinding 可以引用在同一命名空间内定义的 Role 对象
   #+BEGIN_SRC yaml 
  kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: read-pods
    namespace: default
  subjects:
  - kind: User
    name: jane
    apiGroup: rbac.authorization.k8s.io
  roleRef:
    kind: Role
    name: pod-reader
    apiGroup: rbac.authorization.k8s.io
   #+END_SRC

   #+BEGIN_EXAMPLE
     示例中定义的 RoleBinding 对象在 ”default” 命名空间中将 ”pod-reader” 角色授予用户”jane”

     这一授权将允许用户”jane” 从”default” 命名空间中读取 pod
   #+END_EXAMPLE

   RoleBinding 对象也可以引用一个 ClusterRole 对象

   #+BEGIN_EXAMPLE
     这一点允许管理员在整个集群范围内首先定义一组通用的角色，然后再在不同的命名空间中复用这些角色
   #+END_EXAMPLE

   #+BEGIN_SRC yaml 
  # 以下角色绑定允许用户 "dave" 读取 "development" 命名空间中的 secret。
  kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: read-secrets
    namespace: development # 这里表明仅授权读取 "development" 命名空间中的资源。
  subjects:
  - kind: User
    name: dave
    apiGroup: rbac.authorization.k8s.io
  roleRef:
    kind: ClusterRole
    name: secret-reader
    apiGroup: rbac.authorization.k8s.io
   #+END_SRC

   #+BEGIN_EXAMPLE
     尽管示例中的 RoleBinding 引用的是一个 ClusterRole 对象，但是用户”dave”（即角色绑定主体）还是只能读取”development” 命名空间中的 secret（即 RoleBinding 所在的命名空间）
   #+END_EXAMPLE

   也可以使用ClusterRoleBinding在集群级别和所有命名空间中授予权限

   #+BEGIN_SRC yaml 
  kind: ClusterRoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: read-secrets-global
  subjects:
  - kind: Group
    name: manager
    apiGroup: rbac.authorization.k8s.io
  roleRef:
    kind: ClusterRole
    name: secret-reader
    apiGroup: rbac.authorization.k8s.io
   #+END_SRC

   #+BEGIN_EXAMPLE
     示例中所定义的ClusterRoleBinding允许在用户组”manager” 中的任何用户都可以读取集群中任何命名空间中的 secret
   #+END_EXAMPLE
** 对资源的引用

