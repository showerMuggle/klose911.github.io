#+TITLE: 入门
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: rust.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil

* Hello World 

** 编写rust程序 

#+BEGIN_SRC rust
  fn main() {
      println!("Hello, world!");
  }
#+END_SRC

** 编译并运行文件 
#+BEGIN_SRC sh 
  $ rustc main.rs
  $ ./main

  Hello, world!
#+END_SRC

** 分析程序

#+BEGIN_SRC rust 
  fn main() {

  }
#+END_SRC

这几行定义了一个 Rust 函数。 _main_ 函数是一个 *特殊的* 函数：
+ 在可执行的 Rust 程序中，它总是最先运行的代码
+ 第一行代码声明了一个叫做 main 的函数
  + 它 *没有参数* 也 *没有返回值* 
  + 如果有参数的话，它们的名称应该出现在小括号中 _()_ 

#+BEGIN_EXAMPLE
  还须注意，函数体被包裹在花括号中，{}

  Rust 要求所有函数体都要用花括号包裹起来

  一般来说，将左花括号与函数声明置于同一行并以空格分隔，是良好的代码风格
#+END_EXAMPLE

在 _main_ () 函数中是如下代码：
#+BEGIN_SRC rust
  println!("Hello, world!");
#+END_SRC

这行代码完成这个简单程序的所有工作：在屏幕上打印文本。这里有四个重要的细节需要注意：
1. Rust 的缩进风格使用 *4 个空格* ，而不是 1 个制表符
2. _println!_ 调用了一个 *Rust 宏* 。如果是调用函数，则应输入 _println_ （ 没有! ）
3. _"Hello, world!"_ 是一个字符串。把这个字符串作为一个参数传递给 println!，字符串将被打印到屏幕上
4. 该行以 *分号结尾* _;_ ，这代表一个表达式的结束和下一个表达式的开始。大部分 Rust 代码行以分号结尾

** 编译和运行是独立的
Rust 是一种 *预编译静态* 类型语言，这意味着可以编译程序，并将 _可执行文件_ 送给其他人，他们甚至不需要安装 Rust 就可以运行

#+BEGIN_EXAMPLE
  如果你给他人一个 .rb、.py 或 .js 文件，他们需要先分别安装 Ruby，Python，JavaScript 实现（运行时环境，VM）

  不过在这些语言中，只需要一句命令就可以编译和运行程序

  这一切都是语言设计上的权衡取舍
#+END_EXAMPLE

* Hello Cargo 
#+BEGIN_EXAMPLE
  仅仅使用 rustc 编译简单程序是没问题的，不过随着项目的增长，可能需要管理你项目的方方面面，并让代码易于分享

  接下来，要介绍一个叫做 Cargo 的工具，它会帮助编写真实世界中的 Rust 程序
#+END_EXAMPLE

_Cargo_ 是 Rust 的 *构建系统* 和 *包管理器* ，它可以为你处理很多任务，比如 _构建代码_ 、 _下载依赖库_ 并 _编译这些库_ 

#+BEGIN_SRC sh 
  $ cargo --version

  cargo 1.40.0 (bc8e4c8be 2019-11-22)
#+END_SRC

如果看到了版本号，说明已安装

** 使用 Cargo 创建项目
#+BEGIN_SRC sh 
  $ cargo new hello_cargo
  $ cd hello_cargo
#+END_SRC

+ 第一行命令 *新建* 了名为 hello_cargo 的目录。将项目命名为 hello_cargo，同时 Cargo 在一个同名目录中创建项目文件
+ 进入 hello_cargo 目录并列出文件。将会看到 Cargo 生成了两个文件和一个目录：
  + 一个 _Cargo.toml_ 文件
  + 一个 _src_ 目录
    + 位于 src 目录中的 _main.rs_ 文件


*** Cargo.toml
#+BEGIN_SRC toml 
  [package]
  name = "hello_cargo"
  version = "0.1.0"
  authors = ["i514692 <klose.wu@sap.com>"]
  edition = "2018"

  # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

  [dependencies]
#+END_SRC

这个文件使用 _TOML_ 格式，这是 Cargo 配置文件的格式：
+ 第一行 _[package]_ ，是一个片段标题，表明下面的语句用来 *配置一个包* 
  + 随着在这个文件增加更多的信息，还将增加其他片段
+ 接下来的四行设置了 Cargo 编译程序所需的配置：
  + 项目的名称
  + 版本
  + 作者
  + 要使用的 Rust 版本
#+BEGIN_EXAMPLE
  Cargo 从环境中获取你的名字和 email 信息，所以如果这些信息不正确，请修改并保存此文件
#+END_EXAMPLE
+ 最后一行 _[dependencies]_ ，是罗列 *项目依赖* 的片段的开始
#+BEGIN_EXAMPLE
  在 Rust 中，代码包被称为 crates

  这个项目并不需要其他的 crate
#+END_EXAMPLE

*** main.rs
#+BEGIN_SRC rust
  fn main() {
      println!("Hello, world!");
  }
#+END_SRC

Cargo 自动生成了一个 “Hello, world!” 程序

#+BEGIN_EXAMPLE
  Cargo 期望源文件存放在 src 目录中。项目根目录只存放 README、license 信息、配置文件和其他跟代码无关的文件

  使用 Cargo 帮助你保持项目干净整洁，一切井井有条。
#+END_EXAMPLE

** 构建并运行
#+BEGIN_SRC sh 
  $ cargo build
     Compiling hello_cargo v0.1.0 (/home/i514692/Documents/programming/html/klose911.github.io/src/rust/src/hello_cargo)
      Finished dev [unoptimized + debuginfo] target(s) in 0.71s
#+END_SRC

这个命令会 *创建一个可执行文件* target/debug/hello_cargo 可以通过这个命令运行可执行文件：

#+BEGIN_SRC sh 
  $ ./target/debug/hello_cargo
  Hello, world!
#+END_SRC

如果一切顺利，终端上应该会打印出 _Hello, world!_ 

#+BEGIN_EXAMPLE
  首次运行 cargo build 时，也会使 Cargo 在项目根目录创建一个新文件：Cargo.lock。这个文件记录项目依赖的实际版本

  这个项目并没有依赖，所以其内容比较少。你自己永远也不需要碰这个文件，让 Cargo 处理它就行了。
#+END_EXAMPLE

也可以使用 _cargo run_ 在一个命令中 *同时编译并运行* 生成的可执行文件：
#+BEGIN_SRC sh 
  $ cargo run
      Finished dev [unoptimized + debuginfo] target(s) in 0.04s
       Running `target/debug/hello_cargo`
  Hello, world!
#+END_SRC

#+BEGIN_EXAMPLE
  注意这一次并没有出现表明 Cargo 正在编译 hello_cargo 的输出

  Cargo 发现文件并没有被改变，就直接运行了二进制文件

  如果修改了源文件的话，Cargo 会在运行之前重新构建项目
#+END_EXAMPLE

Cargo 还提供了一个叫 _cargo check_ 的命令。该命令 *快速检查代码确保其可以编译* ，但并不产生可执行文件：

#+BEGIN_SRC sh 
  $ cargo check
      Checking hello_cargo v0.1.0 (/home/i514692/Documents/programming/html/klose911.github.io/src/rust/src/hello_cargo)
      Finished dev [unoptimized + debuginfo] target(s) in 0.22s
#+END_SRC

#+BEGIN_EXAMPLE
  通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤

  如果你在编写代码时持续的进行检查，cargo check 会加速开发！

  为此很多 Rustaceans 编写代码时定期运行 cargo check 确保它们可以编译。当准备好使用可执行文件时才运行 cargo build
#+END_EXAMPLE

回顾下已学习的 Cargo 内容：
+ 可以使用 cargo build 或 cargo check 构建项目
+ 可以使用 cargo run 一步构建并运行项目
+ 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target/debug 目录

** 发布构建
当项目最终准备好发布时，可以使用 _cargo build --release_ 来 *优化编译* 项目。这会在 *target/release* 而不是 target/debug 下生成可执行文件

#+BEGIN_EXAMPLE
  这些优化可以让 Rust 代码运行的更快，不过启用这些优化也需要消耗更长的编译时间

  这也就是为什么会有两种不同的配置：
  一种是为了开发，你需要经常快速重新构建
  另一种是为用户构建最终程序，它们不会经常重新构建，并且希望程序运行得越快越好

  如果你在测试代码的运行时间，请确保运行 cargo build --release 并使用 target/release 下的可执行文件进行测试
#+END_EXAMPLE

** 把 Cargo 当成习惯
#+BEGIN_EXAMPLE
  对于简单项目，Cargo 并不比 rustc 提供了更多的优势，不过随着开发的深入，终将证明其价值

  对于拥有多个 crate 的复杂项目，交给 Cargo 来协调构建将简单的多
#+END_EXAMPLE

* 猜猜看游戏
** 创建一个新项目
#+BEGIN_SRC sh 
  $ cargo new guessing_game
  $ cd guessing_game
#+END_SRC

** 处理一次猜测
#+BEGIN_EXAMPLE
  猜猜看程序的第一部分请求和处理用户输入，并检查输入是否符合预期的格式
#+END_EXAMPLE
首先，允许玩家输入猜测。在 src/main.rs 中输入的代码：

#+BEGIN_SRC rust
  use std::io;

  fn main() {
      println!("Guess the number!");

      println!("Please input your guess.");

      let mut guess = String::new();

      io::stdin().read_line(&mut guess)
	  .expect("Failed to read line");

      println!("You guessed: {}", guess);
  }
#+END_SRC

*** 导入包 
为了获取用户输入并打印结果作为输出，需要将 *io* （ _输入/输出_ ）库引入当前作用域。io 库来自于 *标准库* （也被称为 _std_ ） 

#+BEGIN_SRC rust
  use std::io;
#+END_SRC

默认情况下，Rust 将 _prelude_ 模块中少量的类型引入到每个程序的作用域中。如果需要的类型不在 prelude 中，你必须使用 *use* 语句显式地将其引入作用域

#+BEGIN_EXAMPLE
  std::io 库提供很多有用的功能，包括接收用户输入的功能
#+END_EXAMPLE

*** 定义变量
创建一个储存用户输入的地方：

#+BEGIN_SRC rust
  let mut guess = String::new();
#+END_SRC

这是一个 _let_ 语句，用来 *创建变量* 。这里是另外一个例子：

#+BEGIN_SRC rust
  let foo = 5; // 不可变的
#+END_SRC

在 Rust 中，变量 *默认是不可变* 的，程序里的 *mut* 用来定义 *可变的* 变量

#+BEGIN_EXAMPLE
  注意：// 语法开始一个注释，持续到行尾。Rust 忽略注释中的所有内容
#+END_EXAMPLE
 
*** new函数
现在已经知道了 _let mut guess_ 会引入一个叫做 _guess_ 的可变变量。等号(=) 的右边是 guess 所绑定的值，它是 _String::new_ 的结果，这个函数会返回一个 String 的新实例

#+BEGIN_EXAMPLE
  String 是一个标准库提供的字符串类型，它是 UTF-8 编码的可增长文本块
#+END_EXAMPLE

_::new_ 那一行的 *::*  语法表明 _new_ 是 _String_ 类型的一个 *关联函数* ，关联函数是针对类型实现的
#+BEGIN_EXAMPLE
  一些语言中把它称为 静态方法

  在这个例子中 new 函数是 String，而不是 String 的某个特定实例

  new 函数创建了一个新的空字符串，很多类型上有 new 函数，因为它是创建类型实例的惯用函数名
#+END_EXAMPLE

*** 引用
在程序的第一行使用 _use std::io_ ; 从标准库中引入了输入/输出功能。现在调用 io 的关联函数 _stdin_ ：

#+BEGIN_SRC rust 
  io::stdin().read_line(&mut guess)
      .expect("Failed to read line");
#+END_SRC

_stdin_ 函数返回一个 _std::io::Stdin_ 的实例，这代表 *终端标准输入句柄的类型* 

#+BEGIN_EXAMPLE
  如果程序的开头没有 use std::io 这一行，可以把函数调用写成 std::io::stdin
#+END_EXAMPLE

_.read_line(&mut guess)_ : 调用 _read_line_ 方法从 _标准输入句柄_ *获取* _用户输入_ ，向 read_line() 传递了一个 _参数_ *&mut guess* 
+ 无论用户在标准输入中键入什么内容，都将其存入一个字符串中，因此它需要字符串作为参数
+ 这个字符串参数应该是 *可变的* ，以便 read_line 将用户输入附加上去

#+BEGIN_EXAMPLE
  引用是一个复杂的特性，Rust 的一个主要优势就是安全而简单的操纵引用

  当然完成当前程序并不需要了解如此多细节
#+END_EXAMPLE

_&_ 表示这个参数是一个 *引用* ，它允许 *多处代码访问同一处数据* ，而 *无需在内存中多次拷贝* 
+ 它像变量一样，*默认是不可变的* 
+ 所以要写成 *&mut guess* 来使其可变，而不是 &guess

*** 使用 Result 类型来处理潜在的错误 
read_line 将用户输入附加到传递给它的字符串中，不过它也 *返回一个值* ：在这个例子中是 _io::Result_ 

#+BEGIN_EXAMPLE
  Rust 标准库中有很多叫做 Result 的类型

  一个 Result 泛型以及对应子模块的特定版本，比如 io::Result
#+END_EXAMPLE

Result 类型是 *枚举* ，通常也写作 _enums_ 。枚举类型 *持有固定集合的值* ，这些值被称为枚举的 _成员_ 。Result 的成员是 _Ok_ 和 _Err_ 
+ Ok 成员表示操作成功，内部包含成功时产生的值
+ Err 成员则意味着操作失败，并且包含失败的前因后果

#+BEGIN_EXAMPLE
  这些 Result 类型的作用是编码错误处理信息
#+END_EXAMPLE

Result 类型的值，像其他类型一样，拥有定义于其上的方法。 _io::Result_  的实例拥有 _expect_  方法：
+ 如果 io::Result 实例的值是 Err，expect 会导致 *程序崩溃* ，并 *显示当做参数传递给 expect 的信息* 
  + 如果 read_line 方法返回 Err，则可能是来源于 _底层操作系统错误的结果_ 
+ 如果 io::Result 实例的值是 Ok，expect 会 *获取 Ok 中的值* 并 *原样返回* 
  + 这里这个值是 _用户输入到标准输入中的字节数_ 

#+BEGIN_EXAMPLE
  如果不调用 expect，程序也能编译，不过会出现一个警告：


  $ cargo build
     Compiling guessing_game v0.1.0 (file:///projects/guessing_game)
  warning: unused `std::result::Result` which must be used
    --> src/main.rs:10:5
     |
  10 |     io::stdin().read_line(&mut guess);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: #[warn(unused_must_use)] on by default

  Rust 警告没有使用 read_line 的返回值 Result，说明有一个可能的错误没有处理

  消除警告的正确做法是实际编写错误处理代码，不过由于就是希望程序在出现问题时立即崩溃，所以直接使用 expect。
#+END_EXAMPLE

*** 使用 println! 占位符打印值

#+BEGIN_SRC rust
  println!("You guessed: {}", guess);
#+END_SRC

这行代码打印存储用户输入的字符串。第一个参数是 *格式化字符串* ：
+ 里面的 _{}_ 是 *预留在特定位置的占位符*
+ 使用 {} 也可以打印多个值：第一对 {} 使用格式化字符串之后的第一个值，第二对则使用第二个值，依此类推

调用一次 println! 打印多个值看起来像这样：

#+BEGIN_SRC rust
  #![allow(unused_variables)]
  fn main() {
  let x = 5;
  let y = 10;

  println!("x = {} and y = {}", x, y);
  }
#+END_SRC

这行代码会打印出 x = 5 and y = 10

*** 测试第一部分代码
使用 cargo run 运行：

#+BEGIN_SRC sh 
  $ cargo run
     Compiling guessing_game v0.1.0 (/home/i514692/Documents/programming/html/klose911.github.io/src/rust/src/guessing_game)
      Finished dev [unoptimized + debuginfo] target(s) in 0.76s
       Running `target/debug/guessing_game`
  Guess the number!
  Please input your guess.
  8
  You guessed: 8
#+END_SRC

** 生成一个秘密数字
接下来，需要生成一个秘密数字，好让用户来猜

#+BEGIN_EXAMPLE
  秘密数字应该每次都不同，这样重复玩才不会乏味

  范围应该在 1 到 100 之间，这样才不会太困难

#+END_EXAMPLE
Rust 标准库中尚未包含随机数功能。然而，Rust 团队还是提供了一个 _rand_ crate

*** 使用 crate 来增加更多功能 
_crate_ 是一个 *Rust 代码包* ：
+ 正在构建的项目是一个 _二进制 crate_ ，它 *生成一个可执行文件* 
+ rand crate 是一个 _库 crate_ ，可以 *包含任意能被其他程序使用的代码* 

#+BEGIN_EXAMPLE
  Cargo 对外部 crate 的运用是其真正闪光的地方
#+END_EXAMPLE 

使用 rand 编写代码之前，需要修改 Cargo.toml 文件， *引入一个 rand 依赖* 。现在打开这个文件并在底部的 _[dependencies]_ 片段标题之下添加：

#+BEGIN_SRC toml 
  [dependencies]

  rand = "0.5.5"
#+END_SRC

#+BEGIN_EXAMPLE
  在 Cargo.toml 文件中，标题以及之后的内容属同一个片段，直到遇到下一个标题才开始新的片段
#+END_EXAMPLE

_[dependencies]_ 片段告诉 Cargo 本项目 *依赖了哪些外部 crate 及其版本* ：这里使用语义化版本 _0.5.5_  来指定 _rand_ crate

#+BEGIN_EXAMPLE
  Cargo 理解语义化版本（有时也称为 SemVer），这是一种定义版本号的标准

  0.5.5 事实上是 ^0.5.5 的简写，它表示 “任何与 0.5.5 版本公有 API 相兼容的版本”
#+END_EXAMPLE

现在，不修改任何代码，构建项目：

#+BEGIN_SRC sh 
  $ cargo build
      Updating crates.io index
    Downloaded rand v0.5.6
    Downloaded rand_core v0.3.1
    Downloaded rand_core v0.4.2
    Downloaded libc v0.2.66
     Compiling libc v0.2.66
     Compiling rand_core v0.4.2
     Compiling rand_core v0.3.1
     Compiling rand v0.5.6
     Compiling guessing_game v0.1.0 (/home/i514692/Documents/programming/html/klose911.github.io/src/rust/src/guessing_game)
      Finished dev [unoptimized + debuginfo] target(s) in 30.78s
#+END_SRC

可能会出现不同的版本号（多亏了语义化版本，它们与代码是兼容的！），同时显示顺序也可能会有所不同

#+BEGIN_EXAMPLE
  Cargo 从 registry 上获取所有包的最新版本信息，这是一份来自 Crates.io 的数据拷贝

  Crates.io 是 Rust 生态环境中的开发者们向他人贡献 Rust 开源项目的地方
#+END_EXAMPLE

在更新完 registry 后，Cargo 检查 [dependencies] 片段并下载缺失的 crate 

#+BEGIN_EXAMPLE
  本例中，虽然只声明了 rand 一个依赖，然而 Cargo 还是额外获取了 libc 和 rand_core 的拷贝，因为 rand 依赖 libc 来正常工作

  下载完成后，Rust 编译依赖，然后使用这些依赖编译项目
#+END_EXAMPLE


如果不做任何修改，立刻再次运行 cargo build，则不会看到任何除了 Finished 行之外的输出。Cargo 知道它已经下载并编译了依赖，同时 Cargo.toml 文件也没有变动。Cargo 还知道代码也没有任何修改，所以它不会重新编译代码。因为无事可做，它简单的退出了。如果打开 src/main.rs 文件，做一些无关紧要的修改，保存并再次构建，则会出现两行输出：


#+BEGIN_SRC sh 
  $ cargo build
     Compiling guessing_game v0.1.0 (file:///projects/guessing_game)
      Finished dev [unoptimized + debuginfo] target(s) in 2.53 secs
#+END_SRC

这一行表示 Cargo 只针对 src/main.rs 文件的微小修改而更新构建。依赖没有变化，所以 Cargo 知道它可以复用已经为此下载并编译的代码。它只是重新构建了部分（项目）代码

**** Cargo.lock 文件确保构建是可重现的 

Cargo 有一个机制来 *确保任何人在任何时候重新构建代码，都会产生相同的结果* ：Cargo 只会使用你指定的依赖版本，除非你又手动指定了别的

#+BEGIN_EXAMPLE
  例如，如果下周 rand crate 的 0.5.7 版本出来了，它修复了一个重要的 bug，同时也含有一个会破坏代码运行的缺陷，这时会发生什么呢？
#+END_EXAMPLE

Cargo.lock 文件。在第一次运行 cargo build 时创建，并放在 guessing_game 目录。当第一次构建项目时，Cargo 计算出所有符合要求的依赖版本并写入 Cargo.lock 文件。当将来构建项目时，Cargo 会发现 Cargo.lock 已存在并使用其中指定的版本，而不是再次计算所有的版本。这使得拥有了一个自动化的可重现的构建

#+BEGIN_EXAMPLE
  换句话说，项目会持续使用 0.5.6 直到你显式升级，多亏有了 Cargo.lock 文件
#+END_EXAMPLE

**** 更新 crate 到一个新版本 

当 *确实* 需要升级 crate 时，Cargo 提供了另一个命令， _update_ ：它会忽略 Cargo.lock 文件，并计算出所有符合 Cargo.toml 声明的最新版本。如果成功了，Cargo 会把这些版本写入 Cargo.lock 文件

#+BEGIN_EXAMPLE
  不过 Cargo 默认只会寻找大于 0.5.6 而小于 0.6.0 的版本
#+END_EXAMPLE
如果 rand crate 发布了两个新版本，0.5.7 和 0.6.0，在运行 cargo update 时会出现如下内容：

#+BEGIN_SRC sh 
  $ cargo update
      Updating crates.io index
      Updating rand v0.5.6 -> v0.5.7
#+END_SRC

如果想要使用 0.6.0 版本的 rand 或是任何 0.6.x 系列的版本，必须像这样手动更新 Cargo.toml 文件：

#+BEGIN_SRC toml
  [dependencies]

  rand = "0.6.0"
#+END_SRC

下一次运行 cargo build 时，Cargo 会从 registry 更新可用的 crate，并根据指定的新版本重新计算

*** 生成一个随机数
[[file:concept.org][Next: 概念]]

[[file://rust.org][Home: 目录]]
