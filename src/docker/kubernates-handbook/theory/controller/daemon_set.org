#+TITLE: DaemonSet 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: stateful_set.html
#+HTML_LINK_HOME: controller.html
#+OPTIONS: num:nil timestamp:nil ^:nil
* 概念
_DaemonSet_ *确保* _全部_ （或者一些） _Node_  上 *运行* 一个 _Pod 的副本_ ：
+ 当有 Node 加入集群时，也会为他们新增一个 Pod
+ 当有 Node 从集群移除时，这些 Pod 也会被回收
+ 删除 DaemonSet 将会删除它创建的所有 Pod 

使用 DaemonSet 的一些典型用法：
+ 运行集群存储 daemon
  #+BEGIN_EXAMPLE
    例如在每个 Node 上运行 glusterd、ceph
  #+END_EXAMPLE
+ 在每个 Node 上运行日志收集 daemon 
  #+BEGIN_EXAMPLE
    例如fluentd、logstash
  #+END_EXAMPLE
+ 在每个 Node 上运行监控 daemon
  #+BEGIN_EXAMPLE
    例如 Prometheus Node Exporter、collectd、Datadog 代理、New Relic 代理，或 Ganglia gmond
  #+END_EXAMPLE

#+BEGIN_EXAMPLE
  一个简单的用法是，在所有的 Node 上都存在一个 DaemonSet，将被作为每种类型的 daemon 使用

  一个稍微复杂的用法可能是，对单独的每种类型的 daemon 使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU要求
#+END_EXAMPLE
* 编写 
** 必需字段
和其它所有 Kubernetes 配置一样，DaemonSet 需要 _apiVersion_ 、 _kind_ 和 _metadata_ 字段。DaemonSet 也需要一个 _.spec_ 配置段 

** Pod 模板
.spec *唯一必需* 的字段是 _.spec.template_ ，是一个 *Pod 模板* 

#+BEGIN_EXAMPLE
  它与 Pod 具有相同的 schema，除了它是嵌套的，而且不具有 apiVersion 或 kind 字段
#+END_EXAMPLE

Pod 除了必须字段外：
+ 在 DaemonSet 中的 Pod 模板必须 *指定* _合理的标签_ （查看 pod selector）
+ 在 DaemonSet 中的 Pod 模板必需具有一个值为 _Always_ 的 _RestartPolicy_ 
  #+BEGIN_EXAMPLE
    或者未指定 RestartPolicy的值，默认是 Always
  #+END_EXAMPLE

** Pod Selector
_.spec.selector_ 字段表示 *Pod Selector* 。spec.selector 表示一个对象，它由如下两个字段组成：
+ _matchLabels_ : 与 ReplicationController 的 .spec.selector 的原理相同
+ _matchExpressions_ : 允许构建更加复杂的 Selector，可以通过指定 _key_ 、 _value 列表_ ，以及与 key 和 value 列表的 _相关的操作符_ 
#+BEGIN_EXAMPLE
  当上述两个字段都指定时，结果表示的是 AND 关系
#+END_EXAMPLE
如果指定了 .spec.selector，必须与 _.spec.template.metadata.labels_ 相 *匹配* 

#+BEGIN_EXAMPLE
  如果没有指定，它们默认是等价的

  如果与它们配置的不匹配，则会被 API 拒绝
#+END_EXAMPLE

如果 Pod 的 label 与 selector 匹配，或者直接基于其它的 DaemonSet、或者 Controller（例如 ReplicationController），也 *不可以创建* 任何 Pod

#+BEGIN_EXAMPLE
  否则 DaemonSet Controller 将认为那些 Pod 是它创建的

  Kubernetes 不会阻止这样做。一个场景是，可能希望在一个具有不同值的、用来测试用的 Node 上手动创建 Pod
#+END_EXAMPLE

** 仅在相同的 Node 上运行 Pod
如果指定了 _.spec.template.spec.nodeSelector_ ，DaemonSet Controller 将在能够匹配上 Node Selector 的 Node 上创建 Pod

#+BEGIN_EXAMPLE
  类似这种情况，可以指定 .spec.template.spec.affinity，然后 DaemonSet Controller 将在能够匹配上 Node Affinity 的 Node 上创建 Pod

  如果根本就没有指定，则 DaemonSet Controller 将在所有 Node 上创建 Pod
#+END_EXAMPLE

* 
