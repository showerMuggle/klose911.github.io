#+TITLE: 使用 kubeconfig 文件配置跨集群认证
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/main.css" />
#+HTML_LINK_UP: visit.html
#+HTML_LINK_HOME: cluster.html
#+OPTIONS: num:nil timestamp:nil ^:nil

Kubernetes 的认证方式对于不同的人来说可能有所不同：
+ 运行 kubelet 可能有一种认证方式（即证书）
+ 用户可能有不同的认证方式（即令牌）
+ 管理员可能具有他们为个人用户提供的证书列表
+ 可能有多个集群，并希望在同一个地方将其全部定义，这样用户就能使用自己的证书并重用相同的全局配置
  
#+begin_example
  所以为了能够让用户轻松地在多个集群之间切换，对于多个用户的情况下，将其定义在了一个 kubeconfig 文件中

#+end_example
此文件包含一系列与 _昵称_ 相关联的 _身份验证机制_ 和 _集群连接_ 信息。它还引入了一个（用户） _认证信息元组_ 和一个被称为 _上下文_ 的与昵称相关联的集群连接信息的概念

#+begin_example
  如果明确指定，则允许使用多个 kubeconfig 文件。在运行时，它们与命令行中指定的覆盖选项一起加载并合并
#+end_example
* 组成
** 示例
   #+begin_example
     current-context: federal-context
     apiVersion: v1
     clusters:
     - cluster:
	 api-version: v1
	 server: http://cow.org:8080
       name: cow-cluster
     - cluster:
	 certificate-authority: path/to/my/cafile
	 server: https://horse.org:4443
       name: horse-cluster
     - cluster:
	 insecure-skip-tls-verify: true
	 server: https://pig.org:443
       name: pig-cluster
     contexts:
     - context:
	 cluster: horse-cluster
	 namespace: chisel-ns
	 user: green-user
       name: federal-context
     - context:
	 cluster: pig-cluster
	 namespace: saw-ns
	 user: black-user
       name: queen-anne-context
     kind: Config
     preferences:
       colors: true
     users:
     - name: blue-user
       user:
	 token: blue-token
     - name: green-user
       user:
	 client-certificate: path/to/my/client/cert
	 client-key: path/to/my/client/key
   #+end_example
** 组件
*** Cluster
    #+begin_example
      clusters:
      - cluster:
	  certificate-authority: path/to/my/cafile
	  server: https://horse.org:4443
	name: horse-cluster
      - cluster:
	  insecure-skip-tls-verify: true
	  server: https://pig.org:443
	name: pig-cluster
    #+end_example

cluster 中包含 kubernetes _集群的端点数据_ 包括 ：
+ kubernetes apiserver 的完整 url
+ 集群的证书颁发机构
  + 当集群的服务证书未被系统信任的证书颁发机构签名时，设置 _insecure-skip-tls-verify: true_ 

cluster 的名称（昵称）作为该 kubeconfig 文件中的 _集群字典_ 的 _key_ 

#+begin_example
  可以使用 kubectl config set-cluster添加或修改 cluster 条目
#+end_example
*** user
    #+begin_example
      users:
      - name: blue-user
	user:
	  token: blue-token
      - name: green-user
	user:
	  client-certificate: path/to/my/client/cert
	  client-key: path/to/my/client/key
    #+end_example

user 定义用于向 kubernetes 集群进行 _身份验证的客户端凭据_ ：
+ 在加载/合并 kubeconfig 之后，user 将有一个名称（昵称）作为 _用户条目列表_ 中的 _key_
+ 可用凭证有 _client-certificate_ 、 _client-key_ 、 _token_ 和 _username/password_
  + username/password 和 token 是二者只能选择一个
  + client-certificate 和 client-key 可以分别与它们组合 

#+begin_example
  可以使用 kubectl config set-credentials 添加或者修改 user 条目
#+end_example
*** context
    #+begin_example
      contexts:
      - context:
	  cluster: horse-cluster
	  namespace: chisel-ns
	  user: green-user
	name: federal-context
    #+end_example

context 定义了一个命名的 _cluster_ 、 _user_ 、 _namespace_ 元组，用于 *使用提供的认证信息和命名空间将请求发送到指定的集群* ：
+ 三个都是 _可选的_ ：仅使用 cluster、user、namespace 之一指定上下文，或指定 _none_ 
  + 未指定的值或在加载的 kubeconfig 中没有相应条目的命名值将被替换为默认值
    #+begin_example
      例如，如果为上述 kubeconfig 文件指定了 pink-user 的上下文
    #+end_example

#+begin_example
  可以使用 kubectl config set-context 添加或修改上下文条目
#+end_example
*** current-context
    #+begin_example
      current-context: federal-context
    #+end_example

current-context 是昵称或者说是作为 cluster、user、namespace 元组的 ”key“，当 kubectl 从该文件中加载配置的时候会被 *默认* 使用

#+begin_example
  可以在 kubectl 命令行里覆盖这些值，通过分别传入 —context=CONTEXT、 —cluster=CLUSTER、--user=USER 和 --namespace=NAMESPACE 

  可以使用 kubectl config use-context 更改 current-context
#+end_example
*** 杂项
    #+begin_example
      apiVersion: v1
      kind: Config
      preferences:
	colors: true
    #+end_example

+ apiVersion 和 kind 标识客户端解析器的版本和模式，不应手动编辑
+ preferences 指定可选（和当前未使用）的 kubectl 首选项

* 查看



