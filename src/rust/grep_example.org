#+TITLE: 一个 I/O 项目：构建一个命令行程序
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_LINK_UP: test.html   
#+HTML_LINK_HOME: rust.html
#+OPTIONS: num:nil timestamp:nil ^:nil

本章既是一个目前所学的很多技能的概括，也是一个更多标准库功能的探索。将构建一个与文件和命令行输入/输出交互的命令行工具来练习现在一些已经掌握的 Rust 技能

#+BEGIN_EXAMPLE
  Rust 的运行速度、安全性、单二进制文件输出和跨平台支持使其成为创建命令行程序的绝佳选择，所以我们的项目将创建一个自己版本的经典命令行工具：grep

  grep 是 “Globally search a Regular Expression and Print.” 的首字母缩写

  grep 最简单的使用场景是在特定文件中搜索指定字符串。为此，grep 获取一个文件名和一个字符串作为参数，接着读取文件并找到其中包含字符串参数的行，然后打印出这些行
#+END_EXAMPLE
在这个过程中，会展示如何让这个命令行工具利用很多命令行工具中用到的终端功能：
+ 读取环境变量来使得用户可以配置工具的行为
+ 打印到标准错误控制流，而不是标准输出，这样用户可以选择将成功输出重定向到文件中的同时仍然在屏幕上显示错误信息
  
#+BEGIN_EXAMPLE
  一位 Rust 社区的成员，Andrew Gallant，已经创建了一个功能完整且非常快速的 grep 版本，叫做 ripgrep

  相比之下，我们的 grep 版本将非常简单，但能帮助理解像 ripgrep 这样真实项目的背景知识
#+END_EXAMPLE

这里将会结合之前所学的一些内容：
+ 代码组织
+ vector 和字符串
+ 错误处理
+ 合理的使用 trait 和生命周期
+ 测试
  
* 接受命令行参数
  使用 cargo new 新建一个项目，称之为 minigrep 以便与可能已经安装在系统上的 grep 工具相区别：
  #+BEGIN_SRC sh 
  $ cargo new minigrep
       Created binary (application) `minigrep` project
  #+END_SRC
  
  第一个任务是让 minigrep 能够接受两个命令行参数：
+ 文件名
+ 要搜索的字符串
  
也就是说希望能够使用 cargo run、要搜索的字符串和被搜索的文件的路径来运行程序，像这样：

#+BEGIN_SRC sh 
  $ cargo run searchstring example-filename.txt
#+END_SRC

现在 cargo new 生成的程序忽略任何传递给它的参数

#+BEGIN_EXAMPLE
Crates.io 上有一些现成的库可以帮助接受命令行参数，不过我们正在学习这些内容，让我们自己来实现一个
#+END_EXAMPLE

** 读取参数值
   为了确保 minigrep 能够获取传递给它的命令行参数的值，需要一个 Rust 标准库提供的函数，也就是 _std::env::args_ ，这个函数返回一个传递给程序的 _命令行参数_ 的 _迭代器_ 
   #+BEGIN_EXAMPLE
   现在只需理解迭代器的两个细节：
   1. 迭代器生成一系列的值
   2. 可以在迭代器上调用 collect 方法将其转换为一个集合，比如包含所有迭代器产生元素的 vector
   #+END_EXAMPLE
   
   下面代码来读取任何传递给 minigrep 的命令行参数并将其收集到一个 vector 中：
   
   #+BEGIN_SRC rust 
  use std::env;

  fn main() {
      let args: Vec<String> = env::args().collect();
      println!("{:?}", args);
  }
   #+END_SRC
   
   首先使用 _use_ 语句来将 _std::env_ 模块引入作用域以便可以使用它的 args 函数。注意 std::env::args 函数被嵌套进了两层模块中，这里有两个原因：
+ 当所需函数嵌套了多于一层模块时，通常将父模块引入作用域，而不是其自身，这便于利用 std::env 中的其他函数
+ 这比仅仅使用 args 调用函数要更明确一些，因为 args 容易被错认成一个定义于当前模块的函数
  
#+BEGIN_EXAMPLE
  std::env::args 在其任何参数包含无效 Unicode 字符时会 panic！！！

  如果需要接受包含无效 Unicode 字符的参数，使用 std::env::args_os 代替

  这个函数返回 OsString 值而不是 String 值

  这里出于简单考虑使用了 std::env::args，因为 OsString 值每个平台都不一样而且比 String 值处理起来更为复杂
#+END_EXAMPLE
在 main 函数的第一行，调用了 _env::args_ ，并立即使用 _collect_ 来 *创建* 了一个包含 *迭代器* 所有值的 _vector_
#+BEGIN_EXAMPLE
  collect 可以被用来创建很多类型的集合，所以这里显式注明 args 的类型来指定需要一个字符串 vector

  虽然在 Rust 中很少会需要注明类型，然而 collect 是一个经常需要注明类型的函数，因为 Rust 不能推断出想要什么类型的集合
#+END_EXAMPLE

最后，使用 *调试* 格式 _:?_ 打印出 vector。现在尝试分别用两种方式（不包含参数和包含参数）运行代码：

#+BEGIN_SRC sh 
  $ cargo run 
      Finished dev [unoptimized + debuginfo] target(s) in 0.00s
       Running `target/debug/minigrep`
  ["target/debug/minigrep"]

  $ cargo run needle haystack 
      Finished dev [unoptimized + debuginfo] target(s) in 0.00s
       Running `target/debug/minigrep needle haystack`
  ["target/debug/minigrep", "needle", "haystack"]
#+END_SRC

注意 vector 的第一个值是 _target/debug/minigrep_ ，它是我们 *二进制文件的名称* 

#+BEGIN_EXAMPLE
  这与 C 中的参数列表的行为相匹配，让程序使用在执行时调用它们的名称

  如果要在消息中打印它或者根据用于调用程序的命令行别名更改程序的行为，通常可以方便地访问程序名称

  不过考虑到本章的目的，我们将忽略它并只保存所需的两个参数
#+END_EXAMPLE

** 将参数值保存进变量
   #+BEGIN_EXAMPLE
   打印出参数 vector 中的值展示了程序可以访问指定为命令行参数的值
   #+END_EXAMPLE
   现在需要将这两个参数的值保存进变量这样就可以在程序的余下部分使用这些值了：
   
   #+BEGIN_SRC rust 
  use std::env;

  fn main() {
      let args: Vec<String> = env::args().collect();

      let query = &args[1];
      let filename = &args[2];

      println!("Searching for {}", query);
      println!("In file {}", filename);
  }
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   正如之前打印出 vector 时所所看到的，程序的名称占据了 vector 的第一个值 args[0]，所以从索引 1 开始
   
   minigrep 获取的第一个参数是需要搜索的字符串，所以将其将第一个参数的引用存放在变量 query 中
   
   第二个参数将是文件名，所以将第二个参数的引用放入变量 filename 中
   
   #+END_EXAMPLE
   使用参数 test 和 sample.txt 再次运行这个程序：
   
   #+BEGIN_SRC sh 
  $ cargo run test sample.txt
     Compiling minigrep v0.1.0 (file:///projects/minigrep)
      Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
       Running `target/debug/minigrep test sample.txt`
  Searching for test
  In file sample.txt
   #+END_SRC
   
   #+BEGIN_EXAMPLE
   之后会增加一些错误处理来应对类似用户没有提供参数的情况，不过现在将忽略他们并开始增加读取文件功能
   #+END_EXAMPLE
   
* 读取文件
  首先，需要一个用来测试的示例文件：用来确保 minigrep 正常工作的最好的文件是拥有多行少量文本且有一些重复单词的文件
  #+BEGIN_EXAMPLE
  一首艾米莉·狄金森（Emily Dickinson）的诗，它正适合这个工作！
  #+END_EXAMPLE
  在项目根目录创建一个文件 poem.txt：
  
  #+BEGIN_EXAMPLE
  I'm nobody! Who are you?
  Are you nobody, too?
  Then there's a pair of us - don't tell!
  They'd banish us, you know.
  
  How dreary to be somebody!
  How public, like a frog
  To tell your name the livelong day
  To an admiring bog!
  #+END_EXAMPLE
  
  创建完这个文件之后，修改 src/main.rs 并增加下面所示的打开文件的代码：
  #+BEGIN_SRC rust 
  use std::env;
  use std::fs;

  fn main() {
      // --snip--
      println!("In file {}", filename);

      let contents = fs::read_to_string(filename)
          .expect("Something went wrong reading the file");

      println!("With text:\n{}", contents);
  }
  #+END_SRC
  
1. 增加了一个 use 语句来引入标准库中的相关部分：需要 _std::fs_ 来处理文件
2. 在 main 中新增了一行语句：fs::read_to_string 接受 filename，打开文件，接着返回包含其内容的 Result<String>
3. 增加了临时的 println! 打印出读取文件之后 contents 的值，这样就可以检查目前为止的程序能否工作 
   
尝试运行这些代码，随意指定一个字符串作为第一个命令行参数（因为还未实现搜索功能的部分）而将 poem.txt 文件将作为第二个参数：

#+BEGIN_SRC sh 
  $ cargo run the poem.txt
     Compiling minigrep v0.1.0 (file:///projects/minigrep)
      Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
       Running `target/debug/minigrep the poem.txt`
  Searching for the
  In file poem.txt
  With text:
  I'm nobody! Who are you?
  Are you nobody, too?
  Then there's a pair of us — don't tell!
  They'd banish us, you know.

  How dreary to be somebody!
  How public, like a frog
  To tell your name the livelong day
  To an admiring bog!
#+END_SRC

#+BEGIN_EXAMPLE
  虽然它还有一些瑕疵：
  1. main 函数有着多个职能，通常函数只负责一个功能的话会更简洁并易于维护
  2. 没有尽可能的处理错误

  虽然这个程序还很小，这些瑕疵并不是什么大问题，不过随着程序功能的丰富，将会越来越难以用简单的方法修复他们

  在开发程序时，及早开始重构是一个最佳实践，因为重构少量代码时要容易的多，所以现在就开始吧
#+END_EXAMPLE
* 重构改进模块性和错误处理
  我们的程序这里有四个问题需要修复，而且他们都与程序的 _组织方式_ 和如何处理 _潜在错误_ 有关：
+ main 现在进行了两个任务：它解析了参数并打开了文件
#+BEGIN_EXAMPLE
  对于一个这样的小函数，这并不是一个大问题

  然而如果 main 中的功能持续增加，main 函数处理的独立任务也会增加

  当函数承担了更多责任，它就更难以推导，更难以测试，并且更难以在不破坏其他部分的情况下做出修改
#+END_EXAMPLE
  最好能分离出功能以便每个函数就负责一个任务

+ search 和 filename 是程序中的配置变量，而像 f 和 contents 则用来执行程序逻辑
#+BEGIN_EXAMPLE
  随着 main 函数的增长，就需要引入更多的变量到作用域中，而当作用域中有更多的变量时，将更难以追踪每个变量的目的
#+END_EXAMPLE
  最好能将配置变量组织进一个结构，这样就能使他们的目的更明确了

+ 如果打开文件失败使用 expect 来打印出错误信息，不过这个错误信息只是说 file not found
#+BEGIN_EXAMPLE
  除了缺少文件之外还有很多可以导致打开文件失败的方式：例如，文件可能存在，不过可能没有打开它的权限

  如果出于这种情况，打印出的 file not found 错误信息就给了用户错误的建议！
#+END_EXAMPLE
+ 不停地使用 expect 来处理不同的错误

#+BEGIN_EXAMPLE
  如果所有的错误处理都位于一处，这样将来的维护者在需要修改错误处理逻辑时就只需要考虑这一处代码
#+END_EXAMPLE
  将所有的错误处理都放在一处也有助于确保打印的错误信息对终端用户来说是有意义的
** 二进制项目的关注分离
main 函数负责多个任务的组织问题在许多二进制项目中很常见。所以 Rust 社区总结出一类在 main 函数开始变得庞大时进行二进制程序的关注分离的指导性过程。这些过程有如下步骤：
+ 将程序拆分成 main.rs 和 lib.rs 并将 *程序的逻辑* 放入 _lib.rs_ 中
+ 当 _命令行解析逻辑_ *比较小* 时，可以保留在 main.rs 中
+ 当 _命令行解析_ 开始变得 *复杂* 时，也同样将其从 main.rs 提取到 lib.rs 中

#+BEGIN_EXAMPLE
  这个模式的一切就是为了关注分离：main.rs 处理程序运行，而 lib.rs 处理所有的真正的任务逻辑

  因为不能直接测试 main 函数，这个结构通过将所有的程序逻辑移动到 lib.rs 的函数中使得可以测试他们

  仅仅保留在 main.rs 中的代码将足够小以便阅读就可以验证其正确性
#+END_EXAMPLE

经过这些过程之后保留在 main 函数中的责任应该被限制为：
+ 使用 _参数值_ 调用 _命令行解析_ 逻辑
+ *设置* 任何其他的 _配置_ 
+ 调用 _lib.rs_ 中的 _run_ 函数
+ 如果 run 返回错误，则 *处理* 这个 _错误_ 

** 提取参数解析器
首先，将 _解析参数_ 的功能提取到一个 main 将会调用的函数中，为将命令行解析逻辑移动到 src/lib.rs 中做准备。下面展示了新 main 函数的开头，它调用了新函数 parse_config。目前它仍将定义在 src/main.rs 中：

#+BEGIN_SRC rust 
  fn main() {
      let args: Vec<String> = env::args().collect();

      let (query, filename) = parse_config(&args);

      // --snip--
  }

  fn parse_config(args: &[String]) -> (&str, &str) {
      let query = &args[1];
      let filename = &args[2];

      (query, filename)
  }
#+END_SRC
+ 仍然将命令行参数收集进一个 vector
  + 不同于在 main 函数中将索引 1 的参数值赋值给变量 query 和将索引 2 的值赋值给变量 filename，将整个 vector 传递给 parse_config 函数
+ parse_config 函数将包含决定哪个参数该放入哪个变量的逻辑，并将这些值返回到 main
+ 仍然在 main 中创建变量 query 和 filename，不过 main 不再负责处理命令行参数与变量如何对应

#+BEGIN_EXAMPLE
  我们将采用小的、增量的步骤进行重构

  在做出这些改变之后，再次运行程序并验证参数解析是否仍然正常

  经常验证你的进展是一个好习惯，这样在遇到问题时能帮助你定位问题的成因
#+END_EXAMPLE

** 组合配置值
#+BEGIN_EXAMPLE
  现在函数返回一个元组，不过立刻又将元组拆成了独立的部分，这是一个可能没有进行正确抽象的信号

  另一个表明还有改进空间的迹象是 parse_config 名称的 config 部分，它暗示了返回的两个值是相关的并都是一个配置值的一部分

  目前除了将这两个值组合进元组之外并没有表达这个数据结构的意义
#+END_EXAMPLE
可以将这两个值放入一个结构体并给每个字段一个有意义的名字。这会让未来的维护者更容易理解不同的值如何相互关联以及他们的目的

#+BEGIN_SRC rust 
  fn main() {
      let args: Vec<String> = env::args().collect();

      let config = parse_config(&args);

      println!("Searching for {}", config.query);
      println!("In file {}", config.filename);

      let contents = fs::read_to_string(config.filename)
          .expect("Something went wrong reading the file");

      // --snip--
  }

  struct Config {
      query: String,
      filename: String,
  }

  fn parse_config(args: &[String]) -> Config {
      let query = args[1].clone();
      let filename = args[2].clone();

      Config { query, filename }
  }
#+END_SRC
+ 新定义的结构体 _Config_ 中包含字段 _query_ 和 _filename_ 
+ parse_config 的签名表明它现在返回一个 Config 值

#+BEGIN_EXAMPLE
  在之前的 parse_config 函数体中，返回了引用 args 中 String 值的字符串 slice

  但是现在定义 Config 来包含拥有所有权的 String 值，main 中的 args 变量是参数值的所有者并只允许 parse_config 函数借用他们

  这意味着如果 Config 尝试获取 args 中值的所有权将违反 Rust 的借用规则
#+END_EXAMPLE

最简单但有些不太高效的方式是调用这些值的 clone 方法。这会生成 Config 实例可以拥有的 *数据的完整拷贝* ，不过会比储存字符串数据的引用消耗更多的时间和内存

#+BEGIN_EXAMPLE
  拷贝数据使得代码显得更加直白因为无需管理引用的生命周期，同时因为只会进行一次这样的拷贝，而且文件名和要搜索的字符串都比较短，在这种情况下牺牲一小部分性能来换取简洁性的取舍是值得的

  但是由于其运行时消耗，许多 Rustacean 之间有一个趋势是倾向于避免使用 clone 来解决所有权问题

  另外在第一轮编写时拥有一个可以工作但有点低效的程序要比尝试过度优化代码更好一些
#+END_EXAMPLE

更新 main 将 parse_config 返回的 Config 实例放入变量 config 中，并将之前分别使用 search 和 filename 变量的代码更新为现在的使用 Config 结构体的字段的代码

#+BEGIN_EXAMPLE
  这么做会让未来的维护者更容易理解不同的值如何相互关联以及他们的目的

  注意：有一些人将这种在复杂类型更为合适的场景下使用基本类型的反模式称为“基本类型偏执”
#+END_EXAMPLE

*** 创建一个 Config 的构造函数
#+BEGIN_EXAMPLE
  目前为止，将负责解析命令行参数的逻辑从 main 提取到了 parse_config 函数中，这有助于看清值 query 和 filename 是相互关联的并应该在代码中表现这种关系

  接着增加了 Config 结构体来描述 query 和 filename 的相关性，并能够从 parse_config 函数中将这些值的名称作为结构体字段名称返回
#+END_EXAMPLE

现在 parse_config 函数的目的是创建一个 Config 实例，可以将 parse_config 从一个普通函数变为一个叫做 new 的与结构体关联的函数
#+BEGIN_EXAMPLE
  做出这个改变使得代码更符合习惯：

  可以像标准库中的 String 调用 String::new 来创建一个该类型的实例那样，将 parse_config 变为一个与 Config 关联的 new 函数
#+END_EXAMPLE
下面展示了需要做出的修改：

#+BEGIN_SRC rust 
  fn main() {
      let args: Vec<String> = env::args().collect();

      let config = Config::new(&args);

      // --snip--
  }

  // --snip--

  impl Config {
      fn new(args: &[String]) -> Config {
          let query = args[1].clone();
          let filename = args[2].clone();

          Config { query, filename }
      }
  }
#+END_SRC
1. 将 parse_config 的名字改为 new 并将其移动到 impl 块中，这使得 new 函数与 Config 相关联
2. 将 main 中调用 _parse_config_ 的地方更新为调用 _Config::new_ 

再次尝试编译并确保它可以工作

** 修复错误处理

  [[file:fp.org][Next：函数式范式]]
  
  [[file:test.org][Previous：测试]]
  
  [[file:rust.org][Home: 目录]]
  
  
